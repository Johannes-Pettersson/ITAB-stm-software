
ITAB-stm-software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052ac  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005444  08005444  00006444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005464  08005464  00007024  2**0
                  CONTENTS
  4 .ARM          00000008  08005464  08005464  00006464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800546c  0800546c  00007024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800546c  0800546c  0000646c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005470  08005470  00006470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08005474  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d0  20000024  08005498  00007024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009f4  08005498  000079f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011296  00000000  00000000  00007054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028d2  00000000  00000000  000182ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  0001abc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc6  00000000  00000000  0001bc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ec8  00000000  00000000  0001c8e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014029  00000000  00000000  000357ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c7e2  00000000  00000000  000497d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5fb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044ec  00000000  00000000  000e5ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000ea4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000024 	.word	0x20000024
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800542c 	.word	0x0800542c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000028 	.word	0x20000028
 80001d4:	0800542c 	.word	0x0800542c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_ADC_ConvHalfCpltCallback>:
static void MX_ADC1_Init(void);
static void MX_SPI5_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]

}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]

}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fc3e 	bl	8000d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f820 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f9cc 	bl	8000898 <MX_GPIO_Init>
  MX_DMA_Init();
 8000500:	f000 f9aa 	bl	8000858 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000504:	f000 f97e 	bl	8000804 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000508:	f000 f880 	bl	800060c <MX_ADC1_Init>
  MX_SPI5_Init();
 800050c:	f000 f8d2 	bl	80006b4 <MX_SPI5_Init>
  MX_FATFS_Init();
 8000510:	f004 f9ba 	bl	8004888 <MX_FATFS_Init>
  MX_TIM2_Init();
 8000514:	f000 f904 	bl	8000720 <MX_TIM2_Init>
  f_close(&fil);

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
*/
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, SOUND_BUFFER_SIZE);
 8000518:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800051c:	4904      	ldr	r1, [pc, #16]	@ (8000530 <main+0x40>)
 800051e:	4805      	ldr	r0, [pc, #20]	@ (8000534 <main+0x44>)
 8000520:	f000 fcde 	bl	8000ee0 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000524:	2100      	movs	r1, #0
 8000526:	4804      	ldr	r0, [pc, #16]	@ (8000538 <main+0x48>)
 8000528:	f003 f96a 	bl	8003800 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052c:	bf00      	nop
 800052e:	e7fd      	b.n	800052c <main+0x3c>
 8000530:	200001d0 	.word	0x200001d0
 8000534:	20000040 	.word	0x20000040
 8000538:	20000140 	.word	0x20000140

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	@ 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	@ 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f004 ff41 	bl	80053d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b27      	ldr	r3, [pc, #156]	@ (8000604 <SystemClock_Config+0xc8>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000568:	4a26      	ldr	r2, [pc, #152]	@ (8000604 <SystemClock_Config+0xc8>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000570:	4b24      	ldr	r3, [pc, #144]	@ (8000604 <SystemClock_Config+0xc8>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b21      	ldr	r3, [pc, #132]	@ (8000608 <SystemClock_Config+0xcc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a20      	ldr	r2, [pc, #128]	@ (8000608 <SystemClock_Config+0xcc>)
 8000586:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b1e      	ldr	r3, [pc, #120]	@ (8000608 <SystemClock_Config+0xcc>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000598:	2302      	movs	r3, #2
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059c:	2301      	movs	r3, #1
 800059e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a0:	2310      	movs	r3, #16
 80005a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a4:	2302      	movs	r3, #2
 80005a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a8:	2300      	movs	r3, #0
 80005aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ac:	2308      	movs	r3, #8
 80005ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80005b0:	2364      	movs	r3, #100	@ 0x64
 80005b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b8:	2304      	movs	r3, #4
 80005ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0320 	add.w	r3, r7, #32
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 fe79 	bl	80022b8 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005cc:	f000 f9d4 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d4:	2302      	movs	r3, #2
 80005d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	2103      	movs	r1, #3
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 f8db 	bl	80027a8 <HAL_RCC_ClockConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005f8:	f000 f9be 	bl	8000978 <Error_Handler>
  }
}
 80005fc:	bf00      	nop
 80005fe:	3750      	adds	r7, #80	@ 0x50
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000612:	463b      	mov	r3, r7
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800061e:	4b23      	ldr	r3, [pc, #140]	@ (80006ac <MX_ADC1_Init+0xa0>)
 8000620:	4a23      	ldr	r2, [pc, #140]	@ (80006b0 <MX_ADC1_Init+0xa4>)
 8000622:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000624:	4b21      	ldr	r3, [pc, #132]	@ (80006ac <MX_ADC1_Init+0xa0>)
 8000626:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800062a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800062c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ac <MX_ADC1_Init+0xa0>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000632:	4b1e      	ldr	r3, [pc, #120]	@ (80006ac <MX_ADC1_Init+0xa0>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000638:	4b1c      	ldr	r3, [pc, #112]	@ (80006ac <MX_ADC1_Init+0xa0>)
 800063a:	2200      	movs	r2, #0
 800063c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b1b      	ldr	r3, [pc, #108]	@ (80006ac <MX_ADC1_Init+0xa0>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000646:	4b19      	ldr	r3, [pc, #100]	@ (80006ac <MX_ADC1_Init+0xa0>)
 8000648:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800064c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800064e:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <MX_ADC1_Init+0xa0>)
 8000650:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000656:	4b15      	ldr	r3, [pc, #84]	@ (80006ac <MX_ADC1_Init+0xa0>)
 8000658:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800065c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800065e:	4b13      	ldr	r3, [pc, #76]	@ (80006ac <MX_ADC1_Init+0xa0>)
 8000660:	2201      	movs	r2, #1
 8000662:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000664:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <MX_ADC1_Init+0xa0>)
 8000666:	2201      	movs	r2, #1
 8000668:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800066c:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <MX_ADC1_Init+0xa0>)
 800066e:	2201      	movs	r2, #1
 8000670:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000672:	480e      	ldr	r0, [pc, #56]	@ (80006ac <MX_ADC1_Init+0xa0>)
 8000674:	f000 fbf0 	bl	8000e58 <HAL_ADC_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 800067e:	f000 f97b 	bl	8000978 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000686:	2301      	movs	r3, #1
 8000688:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068e:	463b      	mov	r3, r7
 8000690:	4619      	mov	r1, r3
 8000692:	4806      	ldr	r0, [pc, #24]	@ (80006ac <MX_ADC1_Init+0xa0>)
 8000694:	f000 fd1e 	bl	80010d4 <HAL_ADC_ConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800069e:	f000 f96b 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000040 	.word	0x20000040
 80006b0:	40012000 	.word	0x40012000

080006b4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80006b8:	4b17      	ldr	r3, [pc, #92]	@ (8000718 <MX_SPI5_Init+0x64>)
 80006ba:	4a18      	ldr	r2, [pc, #96]	@ (800071c <MX_SPI5_Init+0x68>)
 80006bc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80006be:	4b16      	ldr	r3, [pc, #88]	@ (8000718 <MX_SPI5_Init+0x64>)
 80006c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006c4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80006c6:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <MX_SPI5_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <MX_SPI5_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <MX_SPI5_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <MX_SPI5_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <MX_SPI5_Init+0x64>)
 80006e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006e4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80006e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <MX_SPI5_Init+0x64>)
 80006e8:	2238      	movs	r2, #56	@ 0x38
 80006ea:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000718 <MX_SPI5_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f2:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <MX_SPI5_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <MX_SPI5_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80006fe:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <MX_SPI5_Init+0x64>)
 8000700:	220a      	movs	r2, #10
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	@ (8000718 <MX_SPI5_Init+0x64>)
 8000706:	f002 fa6f 	bl	8002be8 <HAL_SPI_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000710:	f000 f932 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200000e8 	.word	0x200000e8
 800071c:	40015000 	.word	0x40015000

08000720 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08e      	sub	sp, #56	@ 0x38
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000726:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000734:	f107 0320 	add.w	r3, r7, #32
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
 800074c:	615a      	str	r2, [r3, #20]
 800074e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000750:	4b2b      	ldr	r3, [pc, #172]	@ (8000800 <MX_TIM2_Init+0xe0>)
 8000752:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000756:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000758:	4b29      	ldr	r3, [pc, #164]	@ (8000800 <MX_TIM2_Init+0xe0>)
 800075a:	2200      	movs	r2, #0
 800075c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075e:	4b28      	ldr	r3, [pc, #160]	@ (8000800 <MX_TIM2_Init+0xe0>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2082;
 8000764:	4b26      	ldr	r3, [pc, #152]	@ (8000800 <MX_TIM2_Init+0xe0>)
 8000766:	f640 0222 	movw	r2, #2082	@ 0x822
 800076a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076c:	4b24      	ldr	r3, [pc, #144]	@ (8000800 <MX_TIM2_Init+0xe0>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000772:	4b23      	ldr	r3, [pc, #140]	@ (8000800 <MX_TIM2_Init+0xe0>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000778:	4821      	ldr	r0, [pc, #132]	@ (8000800 <MX_TIM2_Init+0xe0>)
 800077a:	f002 ff99 	bl	80036b0 <HAL_TIM_Base_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000784:	f000 f8f8 	bl	8000978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000788:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800078c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800078e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000792:	4619      	mov	r1, r3
 8000794:	481a      	ldr	r0, [pc, #104]	@ (8000800 <MX_TIM2_Init+0xe0>)
 8000796:	f003 f9a5 	bl	8003ae4 <HAL_TIM_ConfigClockSource>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80007a0:	f000 f8ea 	bl	8000978 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007a4:	4816      	ldr	r0, [pc, #88]	@ (8000800 <MX_TIM2_Init+0xe0>)
 80007a6:	f002 ffd2 	bl	800374e <HAL_TIM_PWM_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80007b0:	f000 f8e2 	bl	8000978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80007b4:	2320      	movs	r3, #32
 80007b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007bc:	f107 0320 	add.w	r3, r7, #32
 80007c0:	4619      	mov	r1, r3
 80007c2:	480f      	ldr	r0, [pc, #60]	@ (8000800 <MX_TIM2_Init+0xe0>)
 80007c4:	f003 fd2e 	bl	8004224 <HAL_TIMEx_MasterConfigSynchronization>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80007ce:	f000 f8d3 	bl	8000978 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d2:	2360      	movs	r3, #96	@ 0x60
 80007d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2200      	movs	r2, #0
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	@ (8000800 <MX_TIM2_Init+0xe0>)
 80007ea:	f003 f8b9 	bl	8003960 <HAL_TIM_PWM_ConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80007f4:	f000 f8c0 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	3738      	adds	r7, #56	@ 0x38
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000140 	.word	0x20000140

08000804 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000808:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 800080a:	4a12      	ldr	r2, [pc, #72]	@ (8000854 <MX_USART2_UART_Init+0x50>)
 800080c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800080e:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000814:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	@ (8000850 <MX_USART2_UART_Init+0x4c>)
 800083c:	f003 fd60 	bl	8004300 <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000846:	f000 f897 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000188 	.word	0x20000188
 8000854:	40004400 	.word	0x40004400

08000858 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <MX_DMA_Init+0x3c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a0b      	ldr	r2, [pc, #44]	@ (8000894 <MX_DMA_Init+0x3c>)
 8000868:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <MX_DMA_Init+0x3c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2100      	movs	r1, #0
 800087e:	2038      	movs	r0, #56	@ 0x38
 8000880:	f000 ffb3 	bl	80017ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000884:	2038      	movs	r0, #56	@ 0x38
 8000886:	f000 ffcc 	bl	8001822 <HAL_NVIC_EnableIRQ>

}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	@ 0x28
 800089c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b2e      	ldr	r3, [pc, #184]	@ (800096c <MX_GPIO_Init+0xd4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a2d      	ldr	r2, [pc, #180]	@ (800096c <MX_GPIO_Init+0xd4>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b2b      	ldr	r3, [pc, #172]	@ (800096c <MX_GPIO_Init+0xd4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b27      	ldr	r3, [pc, #156]	@ (800096c <MX_GPIO_Init+0xd4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a26      	ldr	r2, [pc, #152]	@ (800096c <MX_GPIO_Init+0xd4>)
 80008d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b24      	ldr	r3, [pc, #144]	@ (800096c <MX_GPIO_Init+0xd4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	4b20      	ldr	r3, [pc, #128]	@ (800096c <MX_GPIO_Init+0xd4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a1f      	ldr	r2, [pc, #124]	@ (800096c <MX_GPIO_Init+0xd4>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b1d      	ldr	r3, [pc, #116]	@ (800096c <MX_GPIO_Init+0xd4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b19      	ldr	r3, [pc, #100]	@ (800096c <MX_GPIO_Init+0xd4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a18      	ldr	r2, [pc, #96]	@ (800096c <MX_GPIO_Init+0xd4>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b16      	ldr	r3, [pc, #88]	@ (800096c <MX_GPIO_Init+0xd4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800091e:	2201      	movs	r2, #1
 8000920:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000924:	4812      	ldr	r0, [pc, #72]	@ (8000970 <MX_GPIO_Init+0xd8>)
 8000926:	f001 fcad 	bl	8002284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800092a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800092e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000930:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	480c      	ldr	r0, [pc, #48]	@ (8000974 <MX_GPIO_Init+0xdc>)
 8000942:	f001 fb1b 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000946:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800094a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000950:	2301      	movs	r3, #1
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	4804      	ldr	r0, [pc, #16]	@ (8000970 <MX_GPIO_Init+0xd8>)
 8000960:	f001 fb0c 	bl	8001f7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	@ 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40023800 	.word	0x40023800
 8000970:	40020000 	.word	0x40020000
 8000974:	40020800 	.word	0x40020800

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <Error_Handler+0x8>

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b10      	ldr	r3, [pc, #64]	@ (80009d0 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000992:	4a0f      	ldr	r2, [pc, #60]	@ (80009d0 <HAL_MspInit+0x4c>)
 8000994:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000998:	6453      	str	r3, [r2, #68]	@ 0x44
 800099a:	4b0d      	ldr	r3, [pc, #52]	@ (80009d0 <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	4a08      	ldr	r2, [pc, #32]	@ (80009d0 <HAL_MspInit+0x4c>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b6:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009c2:	2007      	movs	r0, #7
 80009c4:	f000 ff06 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800

080009d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	@ 0x28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a2f      	ldr	r2, [pc, #188]	@ (8000ab0 <HAL_ADC_MspInit+0xdc>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d158      	bne.n	8000aa8 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b2e      	ldr	r3, [pc, #184]	@ (8000ab4 <HAL_ADC_MspInit+0xe0>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fe:	4a2d      	ldr	r2, [pc, #180]	@ (8000ab4 <HAL_ADC_MspInit+0xe0>)
 8000a00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a06:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab4 <HAL_ADC_MspInit+0xe0>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b27      	ldr	r3, [pc, #156]	@ (8000ab4 <HAL_ADC_MspInit+0xe0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	4a26      	ldr	r2, [pc, #152]	@ (8000ab4 <HAL_ADC_MspInit+0xe0>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a22:	4b24      	ldr	r3, [pc, #144]	@ (8000ab4 <HAL_ADC_MspInit+0xe0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = MIC_0_ADC_Pin;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a32:	2303      	movs	r3, #3
 8000a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_0_ADC_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	481d      	ldr	r0, [pc, #116]	@ (8000ab8 <HAL_ADC_MspInit+0xe4>)
 8000a42:	f001 fa9b 	bl	8001f7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000a46:	4b1d      	ldr	r3, [pc, #116]	@ (8000abc <HAL_ADC_MspInit+0xe8>)
 8000a48:	4a1d      	ldr	r2, [pc, #116]	@ (8000ac0 <HAL_ADC_MspInit+0xec>)
 8000a4a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000abc <HAL_ADC_MspInit+0xe8>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a52:	4b1a      	ldr	r3, [pc, #104]	@ (8000abc <HAL_ADC_MspInit+0xe8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a58:	4b18      	ldr	r3, [pc, #96]	@ (8000abc <HAL_ADC_MspInit+0xe8>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a5e:	4b17      	ldr	r3, [pc, #92]	@ (8000abc <HAL_ADC_MspInit+0xe8>)
 8000a60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a64:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a66:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <HAL_ADC_MspInit+0xe8>)
 8000a68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a6c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a6e:	4b13      	ldr	r3, [pc, #76]	@ (8000abc <HAL_ADC_MspInit+0xe8>)
 8000a70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a74:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a76:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <HAL_ADC_MspInit+0xe8>)
 8000a78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a7c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <HAL_ADC_MspInit+0xe8>)
 8000a80:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000a84:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a86:	4b0d      	ldr	r3, [pc, #52]	@ (8000abc <HAL_ADC_MspInit+0xe8>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a8c:	480b      	ldr	r0, [pc, #44]	@ (8000abc <HAL_ADC_MspInit+0xe8>)
 8000a8e:	f000 fee3 	bl	8001858 <HAL_DMA_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000a98:	f7ff ff6e 	bl	8000978 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a07      	ldr	r2, [pc, #28]	@ (8000abc <HAL_ADC_MspInit+0xe8>)
 8000aa0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000aa2:	4a06      	ldr	r2, [pc, #24]	@ (8000abc <HAL_ADC_MspInit+0xe8>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	@ 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40012000 	.word	0x40012000
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020000 	.word	0x40020000
 8000abc:	20000088 	.word	0x20000088
 8000ac0:	40026410 	.word	0x40026410

08000ac4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	@ 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a2c      	ldr	r2, [pc, #176]	@ (8000b94 <HAL_SPI_MspInit+0xd0>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d152      	bne.n	8000b8c <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b2b      	ldr	r3, [pc, #172]	@ (8000b98 <HAL_SPI_MspInit+0xd4>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aee:	4a2a      	ldr	r2, [pc, #168]	@ (8000b98 <HAL_SPI_MspInit+0xd4>)
 8000af0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000af6:	4b28      	ldr	r3, [pc, #160]	@ (8000b98 <HAL_SPI_MspInit+0xd4>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	4b24      	ldr	r3, [pc, #144]	@ (8000b98 <HAL_SPI_MspInit+0xd4>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a23      	ldr	r2, [pc, #140]	@ (8000b98 <HAL_SPI_MspInit+0xd4>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b21      	ldr	r3, [pc, #132]	@ (8000b98 <HAL_SPI_MspInit+0xd4>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	4b1d      	ldr	r3, [pc, #116]	@ (8000b98 <HAL_SPI_MspInit+0xd4>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a1c      	ldr	r2, [pc, #112]	@ (8000b98 <HAL_SPI_MspInit+0xd4>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b98 <HAL_SPI_MspInit+0xd4>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PB0     ------> SPI5_SCK
    PA10     ------> SPI5_MOSI
    PA12     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000b4a:	2306      	movs	r3, #6
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SD_SCK_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	4811      	ldr	r0, [pc, #68]	@ (8000b9c <HAL_SPI_MspInit+0xd8>)
 8000b56:	f001 fa11 	bl	8001f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_MOSI_Pin|SD_MISO_Pin;
 8000b5a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000b6c:	2306      	movs	r3, #6
 8000b6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	480a      	ldr	r0, [pc, #40]	@ (8000ba0 <HAL_SPI_MspInit+0xdc>)
 8000b78:	f001 fa00 	bl	8001f7c <HAL_GPIO_Init>

    /* SPI5 interrupt Init */
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2055      	movs	r0, #85	@ 0x55
 8000b82:	f000 fe32 	bl	80017ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8000b86:	2055      	movs	r0, #85	@ 0x55
 8000b88:	f000 fe4b 	bl	8001822 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	@ 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40015000 	.word	0x40015000
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020400 	.word	0x40020400
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bb4:	d10d      	bne.n	8000bd2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <HAL_TIM_Base_MspInit+0x3c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbe:	4a08      	ldr	r2, [pc, #32]	@ (8000be0 <HAL_TIM_Base_MspInit+0x3c>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc6:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <HAL_TIM_Base_MspInit+0x3c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000bd2:	bf00      	nop
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40023800 	.word	0x40023800

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	@ 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a19      	ldr	r2, [pc, #100]	@ (8000c68 <HAL_UART_MspInit+0x84>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d12b      	bne.n	8000c5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b18      	ldr	r3, [pc, #96]	@ (8000c6c <HAL_UART_MspInit+0x88>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	4a17      	ldr	r2, [pc, #92]	@ (8000c6c <HAL_UART_MspInit+0x88>)
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c16:	4b15      	ldr	r3, [pc, #84]	@ (8000c6c <HAL_UART_MspInit+0x88>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <HAL_UART_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	4a10      	ldr	r2, [pc, #64]	@ (8000c6c <HAL_UART_MspInit+0x88>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c32:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <HAL_UART_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c3e:	230c      	movs	r3, #12
 8000c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c4e:	2307      	movs	r3, #7
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	@ (8000c70 <HAL_UART_MspInit+0x8c>)
 8000c5a:	f001 f98f 	bl	8001f7c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c5e:	bf00      	nop
 8000c60:	3728      	adds	r7, #40	@ 0x28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40004400 	.word	0x40004400
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020000 	.word	0x40020000

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <NMI_Handler+0x4>

08000c7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cca:	f000 f8a5 	bl	8000e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cd8:	4802      	ldr	r0, [pc, #8]	@ (8000ce4 <DMA2_Stream0_IRQHandler+0x10>)
 8000cda:	f000 fee5 	bl	8001aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000088 	.word	0x20000088

08000ce8 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8000cec:	4802      	ldr	r0, [pc, #8]	@ (8000cf8 <SPI5_IRQHandler+0x10>)
 8000cee:	f002 faf1 	bl	80032d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200000e8 	.word	0x200000e8

08000cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d00:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <SystemInit+0x20>)
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d06:	4a05      	ldr	r2, [pc, #20]	@ (8000d1c <SystemInit+0x20>)
 8000d08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d24:	f7ff ffea 	bl	8000cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d28:	480c      	ldr	r0, [pc, #48]	@ (8000d5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d2a:	490d      	ldr	r1, [pc, #52]	@ (8000d60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d30:	e002      	b.n	8000d38 <LoopCopyDataInit>

08000d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d36:	3304      	adds	r3, #4

08000d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d3c:	d3f9      	bcc.n	8000d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d40:	4c0a      	ldr	r4, [pc, #40]	@ (8000d6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d44:	e001      	b.n	8000d4a <LoopFillZerobss>

08000d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d48:	3204      	adds	r2, #4

08000d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d4c:	d3fb      	bcc.n	8000d46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d4e:	f004 fb49 	bl	80053e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d52:	f7ff fbcd 	bl	80004f0 <main>
  bx  lr    
 8000d56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d60:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000d64:	08005474 	.word	0x08005474
  ldr r2, =_sbss
 8000d68:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000d6c:	200009f4 	.word	0x200009f4

08000d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <ADC_IRQHandler>
	...

08000d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d78:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000db4 <HAL_Init+0x40>)
 8000d7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d84:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0a      	ldr	r2, [pc, #40]	@ (8000db4 <HAL_Init+0x40>)
 8000d8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d90:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a07      	ldr	r2, [pc, #28]	@ (8000db4 <HAL_Init+0x40>)
 8000d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f000 fd19 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f000 f808 	bl	8000db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da8:	f7ff fdec 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023c00 	.word	0x40023c00

08000db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc0:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <HAL_InitTick+0x54>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b12      	ldr	r3, [pc, #72]	@ (8000e10 <HAL_InitTick+0x58>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 fd31 	bl	800183e <HAL_SYSTICK_Config>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00e      	b.n	8000e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b0f      	cmp	r3, #15
 8000dea:	d80a      	bhi.n	8000e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dec:	2200      	movs	r2, #0
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f000 fcf9 	bl	80017ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df8:	4a06      	ldr	r2, [pc, #24]	@ (8000e14 <HAL_InitTick+0x5c>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e000      	b.n	8000e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	20000008 	.word	0x20000008
 8000e14:	20000004 	.word	0x20000004

08000e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <HAL_IncTick+0x20>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <HAL_IncTick+0x24>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <HAL_IncTick+0x24>)
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	200009d0 	.word	0x200009d0

08000e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b03      	ldr	r3, [pc, #12]	@ (8000e54 <HAL_GetTick+0x14>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	200009d0 	.word	0x200009d0

08000e58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e60:	2300      	movs	r3, #0
 8000e62:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d101      	bne.n	8000e6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e033      	b.n	8000ed6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d109      	bne.n	8000e8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff fdac 	bl	80009d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8e:	f003 0310 	and.w	r3, r3, #16
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d118      	bne.n	8000ec8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000e9e:	f023 0302 	bic.w	r3, r3, #2
 8000ea2:	f043 0202 	orr.w	r2, r3, #2
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f000 fa44 	bl	8001338 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eba:	f023 0303 	bic.w	r3, r3, #3
 8000ebe:	f043 0201 	orr.w	r2, r3, #1
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ec6:	e001      	b.n	8000ecc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d101      	bne.n	8000efe <HAL_ADC_Start_DMA+0x1e>
 8000efa:	2302      	movs	r3, #2
 8000efc:	e0ce      	b.n	800109c <HAL_ADC_Start_DMA+0x1bc>
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	2201      	movs	r2, #1
 8000f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d018      	beq.n	8000f46 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f042 0201 	orr.w	r2, r2, #1
 8000f22:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f24:	4b5f      	ldr	r3, [pc, #380]	@ (80010a4 <HAL_ADC_Start_DMA+0x1c4>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a5f      	ldr	r2, [pc, #380]	@ (80010a8 <HAL_ADC_Start_DMA+0x1c8>)
 8000f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2e:	0c9a      	lsrs	r2, r3, #18
 8000f30:	4613      	mov	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4413      	add	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000f38:	e002      	b.n	8000f40 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1f9      	bne.n	8000f3a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f54:	d107      	bne.n	8000f66 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f64:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	f040 8086 	bne.w	8001082 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000f7e:	f023 0301 	bic.w	r3, r3, #1
 8000f82:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d007      	beq.n	8000fa8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000fa0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000fb4:	d106      	bne.n	8000fc4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fba:	f023 0206 	bic.w	r2, r3, #6
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	645a      	str	r2, [r3, #68]	@ 0x44
 8000fc2:	e002      	b.n	8000fca <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fd2:	4b36      	ldr	r3, [pc, #216]	@ (80010ac <HAL_ADC_Start_DMA+0x1cc>)
 8000fd4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fda:	4a35      	ldr	r2, [pc, #212]	@ (80010b0 <HAL_ADC_Start_DMA+0x1d0>)
 8000fdc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fe2:	4a34      	ldr	r2, [pc, #208]	@ (80010b4 <HAL_ADC_Start_DMA+0x1d4>)
 8000fe4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fea:	4a33      	ldr	r2, [pc, #204]	@ (80010b8 <HAL_ADC_Start_DMA+0x1d8>)
 8000fec:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000ff6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001006:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001016:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	334c      	adds	r3, #76	@ 0x4c
 8001022:	4619      	mov	r1, r3
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f000 fcc4 	bl	80019b4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 031f 	and.w	r3, r3, #31
 8001034:	2b00      	cmp	r3, #0
 8001036:	d10f      	bne.n	8001058 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d129      	bne.n	800109a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	689a      	ldr	r2, [r3, #8]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	e020      	b.n	800109a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a17      	ldr	r2, [pc, #92]	@ (80010bc <HAL_ADC_Start_DMA+0x1dc>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d11b      	bne.n	800109a <HAL_ADC_Start_DMA+0x1ba>
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d114      	bne.n	800109a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	e00b      	b.n	800109a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001086:	f043 0210 	orr.w	r2, r3, #16
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001092:	f043 0201 	orr.w	r2, r3, #1
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000000 	.word	0x20000000
 80010a8:	431bde83 	.word	0x431bde83
 80010ac:	40012300 	.word	0x40012300
 80010b0:	08001531 	.word	0x08001531
 80010b4:	080015eb 	.word	0x080015eb
 80010b8:	08001607 	.word	0x08001607
 80010bc:	40012000 	.word	0x40012000

080010c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d101      	bne.n	80010f0 <HAL_ADC_ConfigChannel+0x1c>
 80010ec:	2302      	movs	r3, #2
 80010ee:	e113      	b.n	8001318 <HAL_ADC_ConfigChannel+0x244>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2201      	movs	r2, #1
 80010f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b09      	cmp	r3, #9
 80010fe:	d925      	bls.n	800114c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	68d9      	ldr	r1, [r3, #12]
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	b29b      	uxth	r3, r3
 800110c:	461a      	mov	r2, r3
 800110e:	4613      	mov	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4413      	add	r3, r2
 8001114:	3b1e      	subs	r3, #30
 8001116:	2207      	movs	r2, #7
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43da      	mvns	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	400a      	ands	r2, r1
 8001124:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68d9      	ldr	r1, [r3, #12]
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	b29b      	uxth	r3, r3
 8001136:	4618      	mov	r0, r3
 8001138:	4603      	mov	r3, r0
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	4403      	add	r3, r0
 800113e:	3b1e      	subs	r3, #30
 8001140:	409a      	lsls	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	430a      	orrs	r2, r1
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	e022      	b.n	8001192 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6919      	ldr	r1, [r3, #16]
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	b29b      	uxth	r3, r3
 8001158:	461a      	mov	r2, r3
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	2207      	movs	r2, #7
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43da      	mvns	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	400a      	ands	r2, r1
 800116e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6919      	ldr	r1, [r3, #16]
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	b29b      	uxth	r3, r3
 8001180:	4618      	mov	r0, r3
 8001182:	4603      	mov	r3, r0
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4403      	add	r3, r0
 8001188:	409a      	lsls	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	430a      	orrs	r2, r1
 8001190:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b06      	cmp	r3, #6
 8001198:	d824      	bhi.n	80011e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	3b05      	subs	r3, #5
 80011ac:	221f      	movs	r2, #31
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	400a      	ands	r2, r1
 80011ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	4618      	mov	r0, r3
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	3b05      	subs	r3, #5
 80011d6:	fa00 f203 	lsl.w	r2, r0, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	430a      	orrs	r2, r1
 80011e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80011e2:	e04c      	b.n	800127e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b0c      	cmp	r3, #12
 80011ea:	d824      	bhi.n	8001236 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	3b23      	subs	r3, #35	@ 0x23
 80011fe:	221f      	movs	r2, #31
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43da      	mvns	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	400a      	ands	r2, r1
 800120c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	b29b      	uxth	r3, r3
 800121a:	4618      	mov	r0, r3
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	3b23      	subs	r3, #35	@ 0x23
 8001228:	fa00 f203 	lsl.w	r2, r0, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	430a      	orrs	r2, r1
 8001232:	631a      	str	r2, [r3, #48]	@ 0x30
 8001234:	e023      	b.n	800127e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	3b41      	subs	r3, #65	@ 0x41
 8001248:	221f      	movs	r2, #31
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43da      	mvns	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	400a      	ands	r2, r1
 8001256:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	b29b      	uxth	r3, r3
 8001264:	4618      	mov	r0, r3
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	3b41      	subs	r3, #65	@ 0x41
 8001272:	fa00 f203 	lsl.w	r2, r0, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	430a      	orrs	r2, r1
 800127c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800127e:	4b29      	ldr	r3, [pc, #164]	@ (8001324 <HAL_ADC_ConfigChannel+0x250>)
 8001280:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a28      	ldr	r2, [pc, #160]	@ (8001328 <HAL_ADC_ConfigChannel+0x254>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d10f      	bne.n	80012ac <HAL_ADC_ConfigChannel+0x1d8>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b12      	cmp	r3, #18
 8001292:	d10b      	bne.n	80012ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001328 <HAL_ADC_ConfigChannel+0x254>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d12b      	bne.n	800130e <HAL_ADC_ConfigChannel+0x23a>
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a1c      	ldr	r2, [pc, #112]	@ (800132c <HAL_ADC_ConfigChannel+0x258>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d003      	beq.n	80012c8 <HAL_ADC_ConfigChannel+0x1f4>
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b11      	cmp	r3, #17
 80012c6:	d122      	bne.n	800130e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a11      	ldr	r2, [pc, #68]	@ (800132c <HAL_ADC_ConfigChannel+0x258>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d111      	bne.n	800130e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012ea:	4b11      	ldr	r3, [pc, #68]	@ (8001330 <HAL_ADC_ConfigChannel+0x25c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a11      	ldr	r2, [pc, #68]	@ (8001334 <HAL_ADC_ConfigChannel+0x260>)
 80012f0:	fba2 2303 	umull	r2, r3, r2, r3
 80012f4:	0c9a      	lsrs	r2, r3, #18
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001300:	e002      	b.n	8001308 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	3b01      	subs	r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f9      	bne.n	8001302 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	40012300 	.word	0x40012300
 8001328:	40012000 	.word	0x40012000
 800132c:	10000012 	.word	0x10000012
 8001330:	20000000 	.word	0x20000000
 8001334:	431bde83 	.word	0x431bde83

08001338 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001340:	4b79      	ldr	r3, [pc, #484]	@ (8001528 <ADC_Init+0x1f0>)
 8001342:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	431a      	orrs	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800136c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6859      	ldr	r1, [r3, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	021a      	lsls	r2, r3, #8
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	430a      	orrs	r2, r1
 8001380:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001390:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6859      	ldr	r1, [r3, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	430a      	orrs	r2, r1
 80013a2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6899      	ldr	r1, [r3, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68da      	ldr	r2, [r3, #12]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ca:	4a58      	ldr	r2, [pc, #352]	@ (800152c <ADC_Init+0x1f4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d022      	beq.n	8001416 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6899      	ldr	r1, [r3, #8]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001400:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6899      	ldr	r1, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	e00f      	b.n	8001436 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001424:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001434:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 0202 	bic.w	r2, r2, #2
 8001444:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6899      	ldr	r1, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7e1b      	ldrb	r3, [r3, #24]
 8001450:	005a      	lsls	r2, r3, #1
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	430a      	orrs	r2, r1
 8001458:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d01b      	beq.n	800149c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001472:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001482:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6859      	ldr	r1, [r3, #4]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800148e:	3b01      	subs	r3, #1
 8001490:	035a      	lsls	r2, r3, #13
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	e007      	b.n	80014ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014aa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80014ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	051a      	lsls	r2, r3, #20
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80014e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6899      	ldr	r1, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80014ee:	025a      	lsls	r2, r3, #9
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001506:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6899      	ldr	r1, [r3, #8]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	029a      	lsls	r2, r3, #10
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	609a      	str	r2, [r3, #8]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	40012300 	.word	0x40012300
 800152c:	0f000001 	.word	0x0f000001

08001530 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800153c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001546:	2b00      	cmp	r3, #0
 8001548:	d13c      	bne.n	80015c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d12b      	bne.n	80015bc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001568:	2b00      	cmp	r3, #0
 800156a:	d127      	bne.n	80015bc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001572:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001576:	2b00      	cmp	r3, #0
 8001578:	d006      	beq.n	8001588 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001584:	2b00      	cmp	r3, #0
 8001586:	d119      	bne.n	80015bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0220 	bic.w	r2, r2, #32
 8001596:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d105      	bne.n	80015bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b4:	f043 0201 	orr.w	r2, r3, #1
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f7fe ff8d 	bl	80004dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80015c2:	e00e      	b.n	80015e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c8:	f003 0310 	and.w	r3, r3, #16
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f7ff fd75 	bl	80010c0 <HAL_ADC_ErrorCallback>
}
 80015d6:	e004      	b.n	80015e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	4798      	blx	r3
}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b084      	sub	sp, #16
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015f6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80015f8:	68f8      	ldr	r0, [r7, #12]
 80015fa:	f7fe ff65 	bl	80004c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001612:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2240      	movs	r2, #64	@ 0x40
 8001618:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161e:	f043 0204 	orr.w	r2, r3, #4
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f7ff fd4a 	bl	80010c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800162c:	bf00      	nop
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001644:	4b0c      	ldr	r3, [pc, #48]	@ (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001650:	4013      	ands	r3, r2
 8001652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800165c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001666:	4a04      	ldr	r2, [pc, #16]	@ (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	60d3      	str	r3, [r2, #12]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001680:	4b04      	ldr	r3, [pc, #16]	@ (8001694 <__NVIC_GetPriorityGrouping+0x18>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	f003 0307 	and.w	r3, r3, #7
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	db0b      	blt.n	80016c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f003 021f 	and.w	r2, r3, #31
 80016b0:	4907      	ldr	r1, [pc, #28]	@ (80016d0 <__NVIC_EnableIRQ+0x38>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	095b      	lsrs	r3, r3, #5
 80016b8:	2001      	movs	r0, #1
 80016ba:	fa00 f202 	lsl.w	r2, r0, r2
 80016be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000e100 	.word	0xe000e100

080016d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	db0a      	blt.n	80016fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	490c      	ldr	r1, [pc, #48]	@ (8001720 <__NVIC_SetPriority+0x4c>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	0112      	lsls	r2, r2, #4
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	440b      	add	r3, r1
 80016f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016fc:	e00a      	b.n	8001714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4908      	ldr	r1, [pc, #32]	@ (8001724 <__NVIC_SetPriority+0x50>)
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	3b04      	subs	r3, #4
 800170c:	0112      	lsls	r2, r2, #4
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	440b      	add	r3, r1
 8001712:	761a      	strb	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000e100 	.word	0xe000e100
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001728:	b480      	push	{r7}
 800172a:	b089      	sub	sp, #36	@ 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f1c3 0307 	rsb	r3, r3, #7
 8001742:	2b04      	cmp	r3, #4
 8001744:	bf28      	it	cs
 8001746:	2304      	movcs	r3, #4
 8001748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3304      	adds	r3, #4
 800174e:	2b06      	cmp	r3, #6
 8001750:	d902      	bls.n	8001758 <NVIC_EncodePriority+0x30>
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3b03      	subs	r3, #3
 8001756:	e000      	b.n	800175a <NVIC_EncodePriority+0x32>
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	f04f 32ff 	mov.w	r2, #4294967295
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	401a      	ands	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001770:	f04f 31ff 	mov.w	r1, #4294967295
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fa01 f303 	lsl.w	r3, r1, r3
 800177a:	43d9      	mvns	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	4313      	orrs	r3, r2
         );
}
 8001782:	4618      	mov	r0, r3
 8001784:	3724      	adds	r7, #36	@ 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017a0:	d301      	bcc.n	80017a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00f      	b.n	80017c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a6:	4a0a      	ldr	r2, [pc, #40]	@ (80017d0 <SysTick_Config+0x40>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ae:	210f      	movs	r1, #15
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295
 80017b4:	f7ff ff8e 	bl	80016d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <SysTick_Config+0x40>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017be:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <SysTick_Config+0x40>)
 80017c0:	2207      	movs	r2, #7
 80017c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	e000e010 	.word	0xe000e010

080017d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ff29 	bl	8001634 <__NVIC_SetPriorityGrouping>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017fc:	f7ff ff3e 	bl	800167c <__NVIC_GetPriorityGrouping>
 8001800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	f7ff ff8e 	bl	8001728 <NVIC_EncodePriority>
 800180c:	4602      	mov	r2, r0
 800180e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff5d 	bl	80016d4 <__NVIC_SetPriority>
}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff31 	bl	8001698 <__NVIC_EnableIRQ>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ffa2 	bl	8001790 <SysTick_Config>
 800184c:	4603      	mov	r3, r0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001864:	f7ff faec 	bl	8000e40 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e099      	b.n	80019a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2202      	movs	r2, #2
 8001878:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0201 	bic.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001894:	e00f      	b.n	80018b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001896:	f7ff fad3 	bl	8000e40 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b05      	cmp	r3, #5
 80018a2:	d908      	bls.n	80018b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2220      	movs	r2, #32
 80018a8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2203      	movs	r2, #3
 80018ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e078      	b.n	80019a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1e8      	bne.n	8001896 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	4b38      	ldr	r3, [pc, #224]	@ (80019b0 <HAL_DMA_Init+0x158>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4313      	orrs	r3, r2
 8001906:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190c:	2b04      	cmp	r3, #4
 800190e:	d107      	bne.n	8001920 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001918:	4313      	orrs	r3, r2
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	4313      	orrs	r3, r2
 800191e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f023 0307 	bic.w	r3, r3, #7
 8001936:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	4313      	orrs	r3, r2
 8001940:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001946:	2b04      	cmp	r3, #4
 8001948:	d117      	bne.n	800197a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	4313      	orrs	r3, r2
 8001952:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00e      	beq.n	800197a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 fa91 	bl	8001e84 <DMA_CheckFifoParam>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2240      	movs	r2, #64	@ 0x40
 800196c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001976:	2301      	movs	r3, #1
 8001978:	e016      	b.n	80019a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 fa48 	bl	8001e18 <DMA_CalcBaseAndBitshift>
 8001988:	4603      	mov	r3, r0
 800198a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001990:	223f      	movs	r2, #63	@ 0x3f
 8001992:	409a      	lsls	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	f010803f 	.word	0xf010803f

080019b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d101      	bne.n	80019da <HAL_DMA_Start_IT+0x26>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e040      	b.n	8001a5c <HAL_DMA_Start_IT+0xa8>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d12f      	bne.n	8001a4e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2202      	movs	r2, #2
 80019f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 f9da 	bl	8001dbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a0c:	223f      	movs	r2, #63	@ 0x3f
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0216 	orr.w	r2, r2, #22
 8001a22:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d007      	beq.n	8001a3c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0208 	orr.w	r2, r2, #8
 8001a3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	e005      	b.n	8001a5a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a56:	2302      	movs	r3, #2
 8001a58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d004      	beq.n	8001a82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2280      	movs	r2, #128	@ 0x80
 8001a7c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00c      	b.n	8001a9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2205      	movs	r2, #5
 8001a86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 0201 	bic.w	r2, r2, #1
 8001a98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ab4:	4b8e      	ldr	r3, [pc, #568]	@ (8001cf0 <HAL_DMA_IRQHandler+0x248>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a8e      	ldr	r2, [pc, #568]	@ (8001cf4 <HAL_DMA_IRQHandler+0x24c>)
 8001aba:	fba2 2303 	umull	r2, r3, r2, r3
 8001abe:	0a9b      	lsrs	r3, r3, #10
 8001ac0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad2:	2208      	movs	r2, #8
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d01a      	beq.n	8001b14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d013      	beq.n	8001b14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0204 	bic.w	r2, r2, #4
 8001afa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b00:	2208      	movs	r2, #8
 8001b02:	409a      	lsls	r2, r3
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b0c:	f043 0201 	orr.w	r2, r3, #1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b18:	2201      	movs	r2, #1
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d012      	beq.n	8001b4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00b      	beq.n	8001b4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b36:	2201      	movs	r2, #1
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b42:	f043 0202 	orr.w	r2, r3, #2
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b4e:	2204      	movs	r2, #4
 8001b50:	409a      	lsls	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4013      	ands	r3, r2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d012      	beq.n	8001b80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00b      	beq.n	8001b80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b78:	f043 0204 	orr.w	r2, r3, #4
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b84:	2210      	movs	r2, #16
 8001b86:	409a      	lsls	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d043      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d03c      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba2:	2210      	movs	r2, #16
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d018      	beq.n	8001bea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d108      	bne.n	8001bd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d024      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	4798      	blx	r3
 8001bd6:	e01f      	b.n	8001c18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d01b      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	4798      	blx	r3
 8001be8:	e016      	b.n	8001c18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d107      	bne.n	8001c08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0208 	bic.w	r2, r2, #8
 8001c06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4013      	ands	r3, r2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 808f 	beq.w	8001d48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0310 	and.w	r3, r3, #16
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 8087 	beq.w	8001d48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c3e:	2220      	movs	r2, #32
 8001c40:	409a      	lsls	r2, r3
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b05      	cmp	r3, #5
 8001c50:	d136      	bne.n	8001cc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0216 	bic.w	r2, r2, #22
 8001c60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	695a      	ldr	r2, [r3, #20]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d103      	bne.n	8001c82 <HAL_DMA_IRQHandler+0x1da>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d007      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0208 	bic.w	r2, r2, #8
 8001c90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c96:	223f      	movs	r2, #63	@ 0x3f
 8001c98:	409a      	lsls	r2, r3
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d07e      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	4798      	blx	r3
        }
        return;
 8001cbe:	e079      	b.n	8001db4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d01d      	beq.n	8001d0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10d      	bne.n	8001cf8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d031      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	4798      	blx	r3
 8001cec:	e02c      	b.n	8001d48 <HAL_DMA_IRQHandler+0x2a0>
 8001cee:	bf00      	nop
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d023      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	4798      	blx	r3
 8001d08:	e01e      	b.n	8001d48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10f      	bne.n	8001d38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0210 	bic.w	r2, r2, #16
 8001d26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d032      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d022      	beq.n	8001da2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2205      	movs	r2, #5
 8001d60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0201 	bic.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	3301      	adds	r3, #1
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d307      	bcc.n	8001d90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f2      	bne.n	8001d74 <HAL_DMA_IRQHandler+0x2cc>
 8001d8e:	e000      	b.n	8001d92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d005      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	4798      	blx	r3
 8001db2:	e000      	b.n	8001db6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001db4:	bf00      	nop
    }
  }
}
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001dd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b40      	cmp	r3, #64	@ 0x40
 8001de8:	d108      	bne.n	8001dfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001dfa:	e007      	b.n	8001e0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	60da      	str	r2, [r3, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	3b10      	subs	r3, #16
 8001e28:	4a14      	ldr	r2, [pc, #80]	@ (8001e7c <DMA_CalcBaseAndBitshift+0x64>)
 8001e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e32:	4a13      	ldr	r2, [pc, #76]	@ (8001e80 <DMA_CalcBaseAndBitshift+0x68>)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4413      	add	r3, r2
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d909      	bls.n	8001e5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e4e:	f023 0303 	bic.w	r3, r3, #3
 8001e52:	1d1a      	adds	r2, r3, #4
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e58:	e007      	b.n	8001e6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e62:	f023 0303 	bic.w	r3, r3, #3
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	aaaaaaab 	.word	0xaaaaaaab
 8001e80:	0800545c 	.word	0x0800545c

08001e84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d11f      	bne.n	8001ede <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	d856      	bhi.n	8001f52 <DMA_CheckFifoParam+0xce>
 8001ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8001eac <DMA_CheckFifoParam+0x28>)
 8001ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eaa:	bf00      	nop
 8001eac:	08001ebd 	.word	0x08001ebd
 8001eb0:	08001ecf 	.word	0x08001ecf
 8001eb4:	08001ebd 	.word	0x08001ebd
 8001eb8:	08001f53 	.word	0x08001f53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d046      	beq.n	8001f56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ecc:	e043      	b.n	8001f56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ed6:	d140      	bne.n	8001f5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001edc:	e03d      	b.n	8001f5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ee6:	d121      	bne.n	8001f2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	d837      	bhi.n	8001f5e <DMA_CheckFifoParam+0xda>
 8001eee:	a201      	add	r2, pc, #4	@ (adr r2, 8001ef4 <DMA_CheckFifoParam+0x70>)
 8001ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef4:	08001f05 	.word	0x08001f05
 8001ef8:	08001f0b 	.word	0x08001f0b
 8001efc:	08001f05 	.word	0x08001f05
 8001f00:	08001f1d 	.word	0x08001f1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	73fb      	strb	r3, [r7, #15]
      break;
 8001f08:	e030      	b.n	8001f6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d025      	beq.n	8001f62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f1a:	e022      	b.n	8001f62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f20:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f24:	d11f      	bne.n	8001f66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f2a:	e01c      	b.n	8001f66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d903      	bls.n	8001f3a <DMA_CheckFifoParam+0xb6>
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d003      	beq.n	8001f40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f38:	e018      	b.n	8001f6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8001f3e:	e015      	b.n	8001f6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00e      	beq.n	8001f6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f50:	e00b      	b.n	8001f6a <DMA_CheckFifoParam+0xe6>
      break;
 8001f52:	bf00      	nop
 8001f54:	e00a      	b.n	8001f6c <DMA_CheckFifoParam+0xe8>
      break;
 8001f56:	bf00      	nop
 8001f58:	e008      	b.n	8001f6c <DMA_CheckFifoParam+0xe8>
      break;
 8001f5a:	bf00      	nop
 8001f5c:	e006      	b.n	8001f6c <DMA_CheckFifoParam+0xe8>
      break;
 8001f5e:	bf00      	nop
 8001f60:	e004      	b.n	8001f6c <DMA_CheckFifoParam+0xe8>
      break;
 8001f62:	bf00      	nop
 8001f64:	e002      	b.n	8001f6c <DMA_CheckFifoParam+0xe8>
      break;   
 8001f66:	bf00      	nop
 8001f68:	e000      	b.n	8001f6c <DMA_CheckFifoParam+0xe8>
      break;
 8001f6a:	bf00      	nop
    }
  } 
  
  return status; 
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop

08001f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	@ 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	e159      	b.n	800224c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f98:	2201      	movs	r2, #1
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	f040 8148 	bne.w	8002246 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d005      	beq.n	8001fce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d130      	bne.n	8002030 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	2203      	movs	r2, #3
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002004:	2201      	movs	r2, #1
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	f003 0201 	and.w	r2, r3, #1
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	2b03      	cmp	r3, #3
 800203a:	d017      	beq.n	800206c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	2203      	movs	r2, #3
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d123      	bne.n	80020c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	08da      	lsrs	r2, r3, #3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3208      	adds	r2, #8
 8002080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	220f      	movs	r2, #15
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	08da      	lsrs	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3208      	adds	r2, #8
 80020ba:	69b9      	ldr	r1, [r7, #24]
 80020bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	2203      	movs	r2, #3
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0203 	and.w	r2, r3, #3
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80a2 	beq.w	8002246 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	4b57      	ldr	r3, [pc, #348]	@ (8002264 <HAL_GPIO_Init+0x2e8>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210a:	4a56      	ldr	r2, [pc, #344]	@ (8002264 <HAL_GPIO_Init+0x2e8>)
 800210c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002110:	6453      	str	r3, [r2, #68]	@ 0x44
 8002112:	4b54      	ldr	r3, [pc, #336]	@ (8002264 <HAL_GPIO_Init+0x2e8>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002116:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800211e:	4a52      	ldr	r2, [pc, #328]	@ (8002268 <HAL_GPIO_Init+0x2ec>)
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	089b      	lsrs	r3, r3, #2
 8002124:	3302      	adds	r3, #2
 8002126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	220f      	movs	r2, #15
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a49      	ldr	r2, [pc, #292]	@ (800226c <HAL_GPIO_Init+0x2f0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d019      	beq.n	800217e <HAL_GPIO_Init+0x202>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a48      	ldr	r2, [pc, #288]	@ (8002270 <HAL_GPIO_Init+0x2f4>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d013      	beq.n	800217a <HAL_GPIO_Init+0x1fe>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a47      	ldr	r2, [pc, #284]	@ (8002274 <HAL_GPIO_Init+0x2f8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00d      	beq.n	8002176 <HAL_GPIO_Init+0x1fa>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a46      	ldr	r2, [pc, #280]	@ (8002278 <HAL_GPIO_Init+0x2fc>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d007      	beq.n	8002172 <HAL_GPIO_Init+0x1f6>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a45      	ldr	r2, [pc, #276]	@ (800227c <HAL_GPIO_Init+0x300>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d101      	bne.n	800216e <HAL_GPIO_Init+0x1f2>
 800216a:	2304      	movs	r3, #4
 800216c:	e008      	b.n	8002180 <HAL_GPIO_Init+0x204>
 800216e:	2307      	movs	r3, #7
 8002170:	e006      	b.n	8002180 <HAL_GPIO_Init+0x204>
 8002172:	2303      	movs	r3, #3
 8002174:	e004      	b.n	8002180 <HAL_GPIO_Init+0x204>
 8002176:	2302      	movs	r3, #2
 8002178:	e002      	b.n	8002180 <HAL_GPIO_Init+0x204>
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <HAL_GPIO_Init+0x204>
 800217e:	2300      	movs	r3, #0
 8002180:	69fa      	ldr	r2, [r7, #28]
 8002182:	f002 0203 	and.w	r2, r2, #3
 8002186:	0092      	lsls	r2, r2, #2
 8002188:	4093      	lsls	r3, r2
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002190:	4935      	ldr	r1, [pc, #212]	@ (8002268 <HAL_GPIO_Init+0x2ec>)
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	089b      	lsrs	r3, r3, #2
 8002196:	3302      	adds	r3, #2
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800219e:	4b38      	ldr	r3, [pc, #224]	@ (8002280 <HAL_GPIO_Init+0x304>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021c2:	4a2f      	ldr	r2, [pc, #188]	@ (8002280 <HAL_GPIO_Init+0x304>)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002280 <HAL_GPIO_Init+0x304>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021ec:	4a24      	ldr	r2, [pc, #144]	@ (8002280 <HAL_GPIO_Init+0x304>)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021f2:	4b23      	ldr	r3, [pc, #140]	@ (8002280 <HAL_GPIO_Init+0x304>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002216:	4a1a      	ldr	r2, [pc, #104]	@ (8002280 <HAL_GPIO_Init+0x304>)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800221c:	4b18      	ldr	r3, [pc, #96]	@ (8002280 <HAL_GPIO_Init+0x304>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002240:	4a0f      	ldr	r2, [pc, #60]	@ (8002280 <HAL_GPIO_Init+0x304>)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3301      	adds	r3, #1
 800224a:	61fb      	str	r3, [r7, #28]
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	2b0f      	cmp	r3, #15
 8002250:	f67f aea2 	bls.w	8001f98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002254:	bf00      	nop
 8002256:	bf00      	nop
 8002258:	3724      	adds	r7, #36	@ 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800
 8002268:	40013800 	.word	0x40013800
 800226c:	40020000 	.word	0x40020000
 8002270:	40020400 	.word	0x40020400
 8002274:	40020800 	.word	0x40020800
 8002278:	40020c00 	.word	0x40020c00
 800227c:	40021000 	.word	0x40021000
 8002280:	40013c00 	.word	0x40013c00

08002284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	807b      	strh	r3, [r7, #2]
 8002290:	4613      	mov	r3, r2
 8002292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002294:	787b      	ldrb	r3, [r7, #1]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800229a:	887a      	ldrh	r2, [r7, #2]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022a0:	e003      	b.n	80022aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022a2:	887b      	ldrh	r3, [r7, #2]
 80022a4:	041a      	lsls	r2, r3, #16
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	619a      	str	r2, [r3, #24]
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e267      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d075      	beq.n	80023c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80022d6:	4b88      	ldr	r3, [pc, #544]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d00c      	beq.n	80022fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022e2:	4b85      	ldr	r3, [pc, #532]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d112      	bne.n	8002314 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ee:	4b82      	ldr	r3, [pc, #520]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022fa:	d10b      	bne.n	8002314 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022fc:	4b7e      	ldr	r3, [pc, #504]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d05b      	beq.n	80023c0 <HAL_RCC_OscConfig+0x108>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d157      	bne.n	80023c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e242      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800231c:	d106      	bne.n	800232c <HAL_RCC_OscConfig+0x74>
 800231e:	4b76      	ldr	r3, [pc, #472]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a75      	ldr	r2, [pc, #468]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	e01d      	b.n	8002368 <HAL_RCC_OscConfig+0xb0>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002334:	d10c      	bne.n	8002350 <HAL_RCC_OscConfig+0x98>
 8002336:	4b70      	ldr	r3, [pc, #448]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a6f      	ldr	r2, [pc, #444]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 800233c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	4b6d      	ldr	r3, [pc, #436]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a6c      	ldr	r2, [pc, #432]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	e00b      	b.n	8002368 <HAL_RCC_OscConfig+0xb0>
 8002350:	4b69      	ldr	r3, [pc, #420]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a68      	ldr	r2, [pc, #416]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002356:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	4b66      	ldr	r3, [pc, #408]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a65      	ldr	r2, [pc, #404]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002362:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d013      	beq.n	8002398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7fe fd66 	bl	8000e40 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002378:	f7fe fd62 	bl	8000e40 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	@ 0x64
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e207      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238a:	4b5b      	ldr	r3, [pc, #364]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0xc0>
 8002396:	e014      	b.n	80023c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7fe fd52 	bl	8000e40 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a0:	f7fe fd4e 	bl	8000e40 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b64      	cmp	r3, #100	@ 0x64
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e1f3      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b2:	4b51      	ldr	r3, [pc, #324]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0xe8>
 80023be:	e000      	b.n	80023c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d063      	beq.n	8002496 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023ce:	4b4a      	ldr	r3, [pc, #296]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00b      	beq.n	80023f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023da:	4b47      	ldr	r3, [pc, #284]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d11c      	bne.n	8002420 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023e6:	4b44      	ldr	r3, [pc, #272]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d116      	bne.n	8002420 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f2:	4b41      	ldr	r3, [pc, #260]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <HAL_RCC_OscConfig+0x152>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d001      	beq.n	800240a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e1c7      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240a:	4b3b      	ldr	r3, [pc, #236]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4937      	ldr	r1, [pc, #220]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 800241a:	4313      	orrs	r3, r2
 800241c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241e:	e03a      	b.n	8002496 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d020      	beq.n	800246a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002428:	4b34      	ldr	r3, [pc, #208]	@ (80024fc <HAL_RCC_OscConfig+0x244>)
 800242a:	2201      	movs	r2, #1
 800242c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242e:	f7fe fd07 	bl	8000e40 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002436:	f7fe fd03 	bl	8000e40 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e1a8      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002448:	4b2b      	ldr	r3, [pc, #172]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002454:	4b28      	ldr	r3, [pc, #160]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4925      	ldr	r1, [pc, #148]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 8002464:	4313      	orrs	r3, r2
 8002466:	600b      	str	r3, [r1, #0]
 8002468:	e015      	b.n	8002496 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800246a:	4b24      	ldr	r3, [pc, #144]	@ (80024fc <HAL_RCC_OscConfig+0x244>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7fe fce6 	bl	8000e40 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002478:	f7fe fce2 	bl	8000e40 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e187      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248a:	4b1b      	ldr	r3, [pc, #108]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d036      	beq.n	8002510 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d016      	beq.n	80024d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024aa:	4b15      	ldr	r3, [pc, #84]	@ (8002500 <HAL_RCC_OscConfig+0x248>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b0:	f7fe fcc6 	bl	8000e40 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b8:	f7fe fcc2 	bl	8000e40 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e167      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ca:	4b0b      	ldr	r3, [pc, #44]	@ (80024f8 <HAL_RCC_OscConfig+0x240>)
 80024cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0x200>
 80024d6:	e01b      	b.n	8002510 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d8:	4b09      	ldr	r3, [pc, #36]	@ (8002500 <HAL_RCC_OscConfig+0x248>)
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024de:	f7fe fcaf 	bl	8000e40 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e4:	e00e      	b.n	8002504 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e6:	f7fe fcab 	bl	8000e40 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d907      	bls.n	8002504 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e150      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
 80024f8:	40023800 	.word	0x40023800
 80024fc:	42470000 	.word	0x42470000
 8002500:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002504:	4b88      	ldr	r3, [pc, #544]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 8002506:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1ea      	bne.n	80024e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 8097 	beq.w	800264c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251e:	2300      	movs	r3, #0
 8002520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002522:	4b81      	ldr	r3, [pc, #516]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10f      	bne.n	800254e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	4b7d      	ldr	r3, [pc, #500]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002536:	4a7c      	ldr	r2, [pc, #496]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 8002538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800253c:	6413      	str	r3, [r2, #64]	@ 0x40
 800253e:	4b7a      	ldr	r3, [pc, #488]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800254a:	2301      	movs	r3, #1
 800254c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254e:	4b77      	ldr	r3, [pc, #476]	@ (800272c <HAL_RCC_OscConfig+0x474>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d118      	bne.n	800258c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800255a:	4b74      	ldr	r3, [pc, #464]	@ (800272c <HAL_RCC_OscConfig+0x474>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a73      	ldr	r2, [pc, #460]	@ (800272c <HAL_RCC_OscConfig+0x474>)
 8002560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002566:	f7fe fc6b 	bl	8000e40 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800256e:	f7fe fc67 	bl	8000e40 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e10c      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002580:	4b6a      	ldr	r3, [pc, #424]	@ (800272c <HAL_RCC_OscConfig+0x474>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d106      	bne.n	80025a2 <HAL_RCC_OscConfig+0x2ea>
 8002594:	4b64      	ldr	r3, [pc, #400]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 8002596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002598:	4a63      	ldr	r2, [pc, #396]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	6713      	str	r3, [r2, #112]	@ 0x70
 80025a0:	e01c      	b.n	80025dc <HAL_RCC_OscConfig+0x324>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b05      	cmp	r3, #5
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCC_OscConfig+0x30c>
 80025aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 80025ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ae:	4a5e      	ldr	r2, [pc, #376]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 80025b0:	f043 0304 	orr.w	r3, r3, #4
 80025b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80025b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 80025b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ba:	4a5b      	ldr	r2, [pc, #364]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025c2:	e00b      	b.n	80025dc <HAL_RCC_OscConfig+0x324>
 80025c4:	4b58      	ldr	r3, [pc, #352]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c8:	4a57      	ldr	r2, [pc, #348]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 80025ca:	f023 0301 	bic.w	r3, r3, #1
 80025ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d0:	4b55      	ldr	r3, [pc, #340]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d4:	4a54      	ldr	r2, [pc, #336]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 80025d6:	f023 0304 	bic.w	r3, r3, #4
 80025da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d015      	beq.n	8002610 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e4:	f7fe fc2c 	bl	8000e40 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ea:	e00a      	b.n	8002602 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ec:	f7fe fc28 	bl	8000e40 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e0cb      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002602:	4b49      	ldr	r3, [pc, #292]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0ee      	beq.n	80025ec <HAL_RCC_OscConfig+0x334>
 800260e:	e014      	b.n	800263a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002610:	f7fe fc16 	bl	8000e40 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002616:	e00a      	b.n	800262e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002618:	f7fe fc12 	bl	8000e40 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e0b5      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800262e:	4b3e      	ldr	r3, [pc, #248]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1ee      	bne.n	8002618 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800263a:	7dfb      	ldrb	r3, [r7, #23]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d105      	bne.n	800264c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002640:	4b39      	ldr	r3, [pc, #228]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 8002642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002644:	4a38      	ldr	r2, [pc, #224]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 8002646:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800264a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80a1 	beq.w	8002798 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002656:	4b34      	ldr	r3, [pc, #208]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 030c 	and.w	r3, r3, #12
 800265e:	2b08      	cmp	r3, #8
 8002660:	d05c      	beq.n	800271c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d141      	bne.n	80026ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266a:	4b31      	ldr	r3, [pc, #196]	@ (8002730 <HAL_RCC_OscConfig+0x478>)
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7fe fbe6 	bl	8000e40 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002678:	f7fe fbe2 	bl	8000e40 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e087      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268a:	4b27      	ldr	r3, [pc, #156]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69da      	ldr	r2, [r3, #28]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a4:	019b      	lsls	r3, r3, #6
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ac:	085b      	lsrs	r3, r3, #1
 80026ae:	3b01      	subs	r3, #1
 80026b0:	041b      	lsls	r3, r3, #16
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b8:	061b      	lsls	r3, r3, #24
 80026ba:	491b      	ldr	r1, [pc, #108]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002730 <HAL_RCC_OscConfig+0x478>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c6:	f7fe fbbb 	bl	8000e40 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ce:	f7fe fbb7 	bl	8000e40 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e05c      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e0:	4b11      	ldr	r3, [pc, #68]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x416>
 80026ec:	e054      	b.n	8002798 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b10      	ldr	r3, [pc, #64]	@ (8002730 <HAL_RCC_OscConfig+0x478>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fba4 	bl	8000e40 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fba0 	bl	8000e40 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e045      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <HAL_RCC_OscConfig+0x470>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x444>
 800271a:	e03d      	b.n	8002798 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d107      	bne.n	8002734 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e038      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
 8002728:	40023800 	.word	0x40023800
 800272c:	40007000 	.word	0x40007000
 8002730:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002734:	4b1b      	ldr	r3, [pc, #108]	@ (80027a4 <HAL_RCC_OscConfig+0x4ec>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d028      	beq.n	8002794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800274c:	429a      	cmp	r2, r3
 800274e:	d121      	bne.n	8002794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d11a      	bne.n	8002794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002764:	4013      	ands	r3, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800276a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800276c:	4293      	cmp	r3, r2
 800276e:	d111      	bne.n	8002794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277a:	085b      	lsrs	r3, r3, #1
 800277c:	3b01      	subs	r3, #1
 800277e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002780:	429a      	cmp	r2, r3
 8002782:	d107      	bne.n	8002794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800

080027a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0cc      	b.n	8002956 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027bc:	4b68      	ldr	r3, [pc, #416]	@ (8002960 <HAL_RCC_ClockConfig+0x1b8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d90c      	bls.n	80027e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ca:	4b65      	ldr	r3, [pc, #404]	@ (8002960 <HAL_RCC_ClockConfig+0x1b8>)
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d2:	4b63      	ldr	r3, [pc, #396]	@ (8002960 <HAL_RCC_ClockConfig+0x1b8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0b8      	b.n	8002956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d020      	beq.n	8002832 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027fc:	4b59      	ldr	r3, [pc, #356]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	4a58      	ldr	r2, [pc, #352]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002806:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	2b00      	cmp	r3, #0
 8002812:	d005      	beq.n	8002820 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002814:	4b53      	ldr	r3, [pc, #332]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	4a52      	ldr	r2, [pc, #328]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800281e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002820:	4b50      	ldr	r3, [pc, #320]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	494d      	ldr	r1, [pc, #308]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	4313      	orrs	r3, r2
 8002830:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d044      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d107      	bne.n	8002856 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002846:	4b47      	ldr	r3, [pc, #284]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d119      	bne.n	8002886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e07f      	b.n	8002956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d003      	beq.n	8002866 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002862:	2b03      	cmp	r3, #3
 8002864:	d107      	bne.n	8002876 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002866:	4b3f      	ldr	r3, [pc, #252]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d109      	bne.n	8002886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e06f      	b.n	8002956 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002876:	4b3b      	ldr	r3, [pc, #236]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e067      	b.n	8002956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002886:	4b37      	ldr	r3, [pc, #220]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f023 0203 	bic.w	r2, r3, #3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4934      	ldr	r1, [pc, #208]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	4313      	orrs	r3, r2
 8002896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002898:	f7fe fad2 	bl	8000e40 <HAL_GetTick>
 800289c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289e:	e00a      	b.n	80028b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a0:	f7fe face 	bl	8000e40 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e04f      	b.n	8002956 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 020c 	and.w	r2, r3, #12
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d1eb      	bne.n	80028a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028c8:	4b25      	ldr	r3, [pc, #148]	@ (8002960 <HAL_RCC_ClockConfig+0x1b8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d20c      	bcs.n	80028f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d6:	4b22      	ldr	r3, [pc, #136]	@ (8002960 <HAL_RCC_ClockConfig+0x1b8>)
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028de:	4b20      	ldr	r3, [pc, #128]	@ (8002960 <HAL_RCC_ClockConfig+0x1b8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d001      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e032      	b.n	8002956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028fc:	4b19      	ldr	r3, [pc, #100]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	4916      	ldr	r1, [pc, #88]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	4313      	orrs	r3, r2
 800290c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d009      	beq.n	800292e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800291a:	4b12      	ldr	r3, [pc, #72]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	490e      	ldr	r1, [pc, #56]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	4313      	orrs	r3, r2
 800292c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800292e:	f000 f821 	bl	8002974 <HAL_RCC_GetSysClockFreq>
 8002932:	4602      	mov	r2, r0
 8002934:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	490a      	ldr	r1, [pc, #40]	@ (8002968 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	5ccb      	ldrb	r3, [r1, r3]
 8002942:	fa22 f303 	lsr.w	r3, r2, r3
 8002946:	4a09      	ldr	r2, [pc, #36]	@ (800296c <HAL_RCC_ClockConfig+0x1c4>)
 8002948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800294a:	4b09      	ldr	r3, [pc, #36]	@ (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe fa32 	bl	8000db8 <HAL_InitTick>

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40023c00 	.word	0x40023c00
 8002964:	40023800 	.word	0x40023800
 8002968:	08005444 	.word	0x08005444
 800296c:	20000000 	.word	0x20000000
 8002970:	20000004 	.word	0x20000004

08002974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002978:	b094      	sub	sp, #80	@ 0x50
 800297a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800298c:	4b79      	ldr	r3, [pc, #484]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x200>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 030c 	and.w	r3, r3, #12
 8002994:	2b08      	cmp	r3, #8
 8002996:	d00d      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002998:	2b08      	cmp	r3, #8
 800299a:	f200 80e1 	bhi.w	8002b60 <HAL_RCC_GetSysClockFreq+0x1ec>
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <HAL_RCC_GetSysClockFreq+0x34>
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d003      	beq.n	80029ae <HAL_RCC_GetSysClockFreq+0x3a>
 80029a6:	e0db      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029a8:	4b73      	ldr	r3, [pc, #460]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0x204>)
 80029aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029ac:	e0db      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029ae:	4b73      	ldr	r3, [pc, #460]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x208>)
 80029b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029b2:	e0d8      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x200>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029be:	4b6d      	ldr	r3, [pc, #436]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x200>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d063      	beq.n	8002a92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ca:	4b6a      	ldr	r3, [pc, #424]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x200>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	099b      	lsrs	r3, r3, #6
 80029d0:	2200      	movs	r2, #0
 80029d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80029d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80029de:	2300      	movs	r3, #0
 80029e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80029e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80029e6:	4622      	mov	r2, r4
 80029e8:	462b      	mov	r3, r5
 80029ea:	f04f 0000 	mov.w	r0, #0
 80029ee:	f04f 0100 	mov.w	r1, #0
 80029f2:	0159      	lsls	r1, r3, #5
 80029f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029f8:	0150      	lsls	r0, r2, #5
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4621      	mov	r1, r4
 8002a00:	1a51      	subs	r1, r2, r1
 8002a02:	6139      	str	r1, [r7, #16]
 8002a04:	4629      	mov	r1, r5
 8002a06:	eb63 0301 	sbc.w	r3, r3, r1
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a18:	4659      	mov	r1, fp
 8002a1a:	018b      	lsls	r3, r1, #6
 8002a1c:	4651      	mov	r1, sl
 8002a1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a22:	4651      	mov	r1, sl
 8002a24:	018a      	lsls	r2, r1, #6
 8002a26:	4651      	mov	r1, sl
 8002a28:	ebb2 0801 	subs.w	r8, r2, r1
 8002a2c:	4659      	mov	r1, fp
 8002a2e:	eb63 0901 	sbc.w	r9, r3, r1
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	f04f 0300 	mov.w	r3, #0
 8002a3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a46:	4690      	mov	r8, r2
 8002a48:	4699      	mov	r9, r3
 8002a4a:	4623      	mov	r3, r4
 8002a4c:	eb18 0303 	adds.w	r3, r8, r3
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	462b      	mov	r3, r5
 8002a54:	eb49 0303 	adc.w	r3, r9, r3
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a66:	4629      	mov	r1, r5
 8002a68:	024b      	lsls	r3, r1, #9
 8002a6a:	4621      	mov	r1, r4
 8002a6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a70:	4621      	mov	r1, r4
 8002a72:	024a      	lsls	r2, r1, #9
 8002a74:	4610      	mov	r0, r2
 8002a76:	4619      	mov	r1, r3
 8002a78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a84:	f7fd fba8 	bl	80001d8 <__aeabi_uldivmod>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a90:	e058      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a92:	4b38      	ldr	r3, [pc, #224]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	099b      	lsrs	r3, r3, #6
 8002a98:	2200      	movs	r2, #0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002aa2:	623b      	str	r3, [r7, #32]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aa8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002aac:	4642      	mov	r2, r8
 8002aae:	464b      	mov	r3, r9
 8002ab0:	f04f 0000 	mov.w	r0, #0
 8002ab4:	f04f 0100 	mov.w	r1, #0
 8002ab8:	0159      	lsls	r1, r3, #5
 8002aba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002abe:	0150      	lsls	r0, r2, #5
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4641      	mov	r1, r8
 8002ac6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002aca:	4649      	mov	r1, r9
 8002acc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002adc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ae0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ae4:	ebb2 040a 	subs.w	r4, r2, sl
 8002ae8:	eb63 050b 	sbc.w	r5, r3, fp
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	00eb      	lsls	r3, r5, #3
 8002af6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002afa:	00e2      	lsls	r2, r4, #3
 8002afc:	4614      	mov	r4, r2
 8002afe:	461d      	mov	r5, r3
 8002b00:	4643      	mov	r3, r8
 8002b02:	18e3      	adds	r3, r4, r3
 8002b04:	603b      	str	r3, [r7, #0]
 8002b06:	464b      	mov	r3, r9
 8002b08:	eb45 0303 	adc.w	r3, r5, r3
 8002b0c:	607b      	str	r3, [r7, #4]
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	f04f 0300 	mov.w	r3, #0
 8002b16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	028b      	lsls	r3, r1, #10
 8002b1e:	4621      	mov	r1, r4
 8002b20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b24:	4621      	mov	r1, r4
 8002b26:	028a      	lsls	r2, r1, #10
 8002b28:	4610      	mov	r0, r2
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b2e:	2200      	movs	r2, #0
 8002b30:	61bb      	str	r3, [r7, #24]
 8002b32:	61fa      	str	r2, [r7, #28]
 8002b34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b38:	f7fd fb4e 	bl	80001d8 <__aeabi_uldivmod>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4613      	mov	r3, r2
 8002b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b44:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	0c1b      	lsrs	r3, r3, #16
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	3301      	adds	r3, #1
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002b54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b5e:	e002      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b60:	4b05      	ldr	r3, [pc, #20]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3750      	adds	r7, #80	@ 0x50
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800
 8002b78:	00f42400 	.word	0x00f42400
 8002b7c:	007a1200 	.word	0x007a1200

08002b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b84:	4b03      	ldr	r3, [pc, #12]	@ (8002b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b86:	681b      	ldr	r3, [r3, #0]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	20000000 	.word	0x20000000

08002b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b9c:	f7ff fff0 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	0a9b      	lsrs	r3, r3, #10
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	4903      	ldr	r1, [pc, #12]	@ (8002bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bae:	5ccb      	ldrb	r3, [r1, r3]
 8002bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	08005454 	.word	0x08005454

08002bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bc4:	f7ff ffdc 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	4b05      	ldr	r3, [pc, #20]	@ (8002be0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	0b5b      	lsrs	r3, r3, #13
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	4903      	ldr	r1, [pc, #12]	@ (8002be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bd6:	5ccb      	ldrb	r3, [r1, r3]
 8002bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40023800 	.word	0x40023800
 8002be4:	08005454 	.word	0x08005454

08002be8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e07b      	b.n	8002cf2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d108      	bne.n	8002c14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c0a:	d009      	beq.n	8002c20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	61da      	str	r2, [r3, #28]
 8002c12:	e005      	b.n	8002c20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d106      	bne.n	8002c40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fd ff42 	bl	8000ac4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca4:	ea42 0103 	orr.w	r1, r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	0c1b      	lsrs	r3, r3, #16
 8002cbe:	f003 0104 	and.w	r1, r3, #4
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc6:	f003 0210 	and.w	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	69da      	ldr	r2, [r3, #28]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ce0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b088      	sub	sp, #32
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	60f8      	str	r0, [r7, #12]
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	4613      	mov	r3, r2
 8002d08:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d0a:	f7fe f899 	bl	8000e40 <HAL_GetTick>
 8002d0e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002d10:	88fb      	ldrh	r3, [r7, #6]
 8002d12:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d001      	beq.n	8002d24 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002d20:	2302      	movs	r3, #2
 8002d22:	e12a      	b.n	8002f7a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HAL_SPI_Transmit+0x36>
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e122      	b.n	8002f7a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_SPI_Transmit+0x48>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e11b      	b.n	8002f7a <HAL_SPI_Transmit+0x280>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	88fa      	ldrh	r2, [r7, #6]
 8002d62:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	88fa      	ldrh	r2, [r7, #6]
 8002d68:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d90:	d10f      	bne.n	8002db2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002da0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002db0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dbc:	2b40      	cmp	r3, #64	@ 0x40
 8002dbe:	d007      	beq.n	8002dd0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dd8:	d152      	bne.n	8002e80 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <HAL_SPI_Transmit+0xee>
 8002de2:	8b7b      	ldrh	r3, [r7, #26]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d145      	bne.n	8002e74 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dec:	881a      	ldrh	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df8:	1c9a      	adds	r2, r3, #2
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e0c:	e032      	b.n	8002e74 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d112      	bne.n	8002e42 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e20:	881a      	ldrh	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2c:	1c9a      	adds	r2, r3, #2
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002e40:	e018      	b.n	8002e74 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e42:	f7fd fffd 	bl	8000e40 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d803      	bhi.n	8002e5a <HAL_SPI_Transmit+0x160>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e58:	d102      	bne.n	8002e60 <HAL_SPI_Transmit+0x166>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d109      	bne.n	8002e74 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e082      	b.n	8002f7a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1c7      	bne.n	8002e0e <HAL_SPI_Transmit+0x114>
 8002e7e:	e053      	b.n	8002f28 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <HAL_SPI_Transmit+0x194>
 8002e88:	8b7b      	ldrh	r3, [r7, #26]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d147      	bne.n	8002f1e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	330c      	adds	r3, #12
 8002e98:	7812      	ldrb	r2, [r2, #0]
 8002e9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002eb4:	e033      	b.n	8002f1e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d113      	bne.n	8002eec <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	330c      	adds	r3, #12
 8002ece:	7812      	ldrb	r2, [r2, #0]
 8002ed0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002eea:	e018      	b.n	8002f1e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eec:	f7fd ffa8 	bl	8000e40 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d803      	bhi.n	8002f04 <HAL_SPI_Transmit+0x20a>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f02:	d102      	bne.n	8002f0a <HAL_SPI_Transmit+0x210>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e02d      	b.n	8002f7a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1c6      	bne.n	8002eb6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	6839      	ldr	r1, [r7, #0]
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 fb6b 	bl	8003608 <SPI_EndRxTxTransaction>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10a      	bne.n	8002f5c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f46:	2300      	movs	r3, #0
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002f78:	2300      	movs	r3, #0
  }
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3720      	adds	r7, #32
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b08a      	sub	sp, #40	@ 0x28
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
 8002f8e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f90:	2301      	movs	r3, #1
 8002f92:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f94:	f7fd ff54 	bl	8000e40 <HAL_GetTick>
 8002f98:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fa0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002fa8:	887b      	ldrh	r3, [r7, #2]
 8002faa:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002fac:	7ffb      	ldrb	r3, [r7, #31]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d00c      	beq.n	8002fcc <HAL_SPI_TransmitReceive+0x4a>
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fb8:	d106      	bne.n	8002fc8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d102      	bne.n	8002fc8 <HAL_SPI_TransmitReceive+0x46>
 8002fc2:	7ffb      	ldrb	r3, [r7, #31]
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d001      	beq.n	8002fcc <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e17f      	b.n	80032cc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d005      	beq.n	8002fde <HAL_SPI_TransmitReceive+0x5c>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <HAL_SPI_TransmitReceive+0x5c>
 8002fd8:	887b      	ldrh	r3, [r7, #2]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e174      	b.n	80032cc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d101      	bne.n	8002ff0 <HAL_SPI_TransmitReceive+0x6e>
 8002fec:	2302      	movs	r3, #2
 8002fee:	e16d      	b.n	80032cc <HAL_SPI_TransmitReceive+0x34a>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b04      	cmp	r3, #4
 8003002:	d003      	beq.n	800300c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2205      	movs	r2, #5
 8003008:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	887a      	ldrh	r2, [r7, #2]
 800301c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	887a      	ldrh	r2, [r7, #2]
 8003022:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	887a      	ldrh	r2, [r7, #2]
 800302e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	887a      	ldrh	r2, [r7, #2]
 8003034:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800304c:	2b40      	cmp	r3, #64	@ 0x40
 800304e:	d007      	beq.n	8003060 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800305e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003068:	d17e      	bne.n	8003168 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <HAL_SPI_TransmitReceive+0xf6>
 8003072:	8afb      	ldrh	r3, [r7, #22]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d16c      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307c:	881a      	ldrh	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003088:	1c9a      	adds	r2, r3, #2
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800309c:	e059      	b.n	8003152 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d11b      	bne.n	80030e4 <HAL_SPI_TransmitReceive+0x162>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d016      	beq.n	80030e4 <HAL_SPI_TransmitReceive+0x162>
 80030b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d113      	bne.n	80030e4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c0:	881a      	ldrh	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030cc:	1c9a      	adds	r2, r3, #2
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d119      	bne.n	8003126 <HAL_SPI_TransmitReceive+0x1a4>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d014      	beq.n	8003126 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003106:	b292      	uxth	r2, r2
 8003108:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310e:	1c9a      	adds	r2, r3, #2
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003122:	2301      	movs	r3, #1
 8003124:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003126:	f7fd fe8b 	bl	8000e40 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003132:	429a      	cmp	r2, r3
 8003134:	d80d      	bhi.n	8003152 <HAL_SPI_TransmitReceive+0x1d0>
 8003136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313c:	d009      	beq.n	8003152 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e0bc      	b.n	80032cc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003156:	b29b      	uxth	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1a0      	bne.n	800309e <HAL_SPI_TransmitReceive+0x11c>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003160:	b29b      	uxth	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d19b      	bne.n	800309e <HAL_SPI_TransmitReceive+0x11c>
 8003166:	e082      	b.n	800326e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <HAL_SPI_TransmitReceive+0x1f4>
 8003170:	8afb      	ldrh	r3, [r7, #22]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d171      	bne.n	800325a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	330c      	adds	r3, #12
 8003180:	7812      	ldrb	r2, [r2, #0]
 8003182:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800319c:	e05d      	b.n	800325a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d11c      	bne.n	80031e6 <HAL_SPI_TransmitReceive+0x264>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d017      	beq.n	80031e6 <HAL_SPI_TransmitReceive+0x264>
 80031b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d114      	bne.n	80031e6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	330c      	adds	r3, #12
 80031c6:	7812      	ldrb	r2, [r2, #0]
 80031c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031d8:	b29b      	uxth	r3, r3
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d119      	bne.n	8003228 <HAL_SPI_TransmitReceive+0x2a6>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d014      	beq.n	8003228 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800321a:	b29b      	uxth	r3, r3
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003224:	2301      	movs	r3, #1
 8003226:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003228:	f7fd fe0a 	bl	8000e40 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003234:	429a      	cmp	r2, r3
 8003236:	d803      	bhi.n	8003240 <HAL_SPI_TransmitReceive+0x2be>
 8003238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323e:	d102      	bne.n	8003246 <HAL_SPI_TransmitReceive+0x2c4>
 8003240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e038      	b.n	80032cc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800325e:	b29b      	uxth	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d19c      	bne.n	800319e <HAL_SPI_TransmitReceive+0x21c>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d197      	bne.n	800319e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800326e:	6a3a      	ldr	r2, [r7, #32]
 8003270:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f9c8 	bl	8003608 <SPI_EndRxTxTransaction>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d008      	beq.n	8003290 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2220      	movs	r2, #32
 8003282:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e01d      	b.n	80032cc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10a      	bne.n	80032ae <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003298:	2300      	movs	r3, #0
 800329a:	613b      	str	r3, [r7, #16]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	613b      	str	r3, [r7, #16]
 80032ac:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80032ca:	2300      	movs	r3, #0
  }
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3728      	adds	r7, #40	@ 0x28
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10e      	bne.n	8003314 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d009      	beq.n	8003314 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003306:	2b00      	cmp	r3, #0
 8003308:	d004      	beq.n	8003314 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	4798      	blx	r3
    return;
 8003312:	e0ce      	b.n	80034b2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d009      	beq.n	8003332 <HAL_SPI_IRQHandler+0x5e>
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003324:	2b00      	cmp	r3, #0
 8003326:	d004      	beq.n	8003332 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	4798      	blx	r3
    return;
 8003330:	e0bf      	b.n	80034b2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	f003 0320 	and.w	r3, r3, #32
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10a      	bne.n	8003352 <HAL_SPI_IRQHandler+0x7e>
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003342:	2b00      	cmp	r3, #0
 8003344:	d105      	bne.n	8003352 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 80b0 	beq.w	80034b2 <HAL_SPI_IRQHandler+0x1de>
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	f003 0320 	and.w	r3, r3, #32
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80aa 	beq.w	80034b2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003364:	2b00      	cmp	r3, #0
 8003366:	d023      	beq.n	80033b0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b03      	cmp	r3, #3
 8003372:	d011      	beq.n	8003398 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003378:	f043 0204 	orr.w	r2, r3, #4
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	e00b      	b.n	80033b0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003398:	2300      	movs	r3, #0
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	693b      	ldr	r3, [r7, #16]
        return;
 80033ae:	e080      	b.n	80034b2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	f003 0320 	and.w	r3, r3, #32
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d014      	beq.n	80033e4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033be:	f043 0201 	orr.w	r2, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00c      	beq.n	8003408 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f2:	f043 0208 	orr.w	r2, r3, #8
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80033fa:	2300      	movs	r3, #0
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340c:	2b00      	cmp	r3, #0
 800340e:	d04f      	beq.n	80034b0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800341e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d104      	bne.n	800343c <HAL_SPI_IRQHandler+0x168>
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d034      	beq.n	80034a6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0203 	bic.w	r2, r2, #3
 800344a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003450:	2b00      	cmp	r3, #0
 8003452:	d011      	beq.n	8003478 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003458:	4a17      	ldr	r2, [pc, #92]	@ (80034b8 <HAL_SPI_IRQHandler+0x1e4>)
 800345a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003460:	4618      	mov	r0, r3
 8003462:	f7fe faff 	bl	8001a64 <HAL_DMA_Abort_IT>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003470:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800347c:	2b00      	cmp	r3, #0
 800347e:	d016      	beq.n	80034ae <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003484:	4a0c      	ldr	r2, [pc, #48]	@ (80034b8 <HAL_SPI_IRQHandler+0x1e4>)
 8003486:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800348c:	4618      	mov	r0, r3
 800348e:	f7fe fae9 	bl	8001a64 <HAL_DMA_Abort_IT>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800349c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80034a4:	e003      	b.n	80034ae <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f808 	bl	80034bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80034ac:	e000      	b.n	80034b0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80034ae:	bf00      	nop
    return;
 80034b0:	bf00      	nop
  }
}
 80034b2:	3720      	adds	r7, #32
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	080034d1 	.word	0x080034d1

080034bc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034dc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f7ff ffe6 	bl	80034bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80034f0:	bf00      	nop
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b088      	sub	sp, #32
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003508:	f7fd fc9a 	bl	8000e40 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	4413      	add	r3, r2
 8003516:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003518:	f7fd fc92 	bl	8000e40 <HAL_GetTick>
 800351c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800351e:	4b39      	ldr	r3, [pc, #228]	@ (8003604 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	015b      	lsls	r3, r3, #5
 8003524:	0d1b      	lsrs	r3, r3, #20
 8003526:	69fa      	ldr	r2, [r7, #28]
 8003528:	fb02 f303 	mul.w	r3, r2, r3
 800352c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800352e:	e054      	b.n	80035da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003536:	d050      	beq.n	80035da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003538:	f7fd fc82 	bl	8000e40 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	69fa      	ldr	r2, [r7, #28]
 8003544:	429a      	cmp	r2, r3
 8003546:	d902      	bls.n	800354e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d13d      	bne.n	80035ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800355c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003566:	d111      	bne.n	800358c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003570:	d004      	beq.n	800357c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800357a:	d107      	bne.n	800358c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800358a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003590:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003594:	d10f      	bne.n	80035b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e017      	b.n	80035fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d19b      	bne.n	8003530 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3720      	adds	r7, #32
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	20000000 	.word	0x20000000

08003608 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af02      	add	r7, sp, #8
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2201      	movs	r2, #1
 800361c:	2102      	movs	r1, #2
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f7ff ff6a 	bl	80034f8 <SPI_WaitFlagStateUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d007      	beq.n	800363a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800362e:	f043 0220 	orr.w	r2, r3, #32
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e032      	b.n	80036a0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800363a:	4b1b      	ldr	r3, [pc, #108]	@ (80036a8 <SPI_EndRxTxTransaction+0xa0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a1b      	ldr	r2, [pc, #108]	@ (80036ac <SPI_EndRxTxTransaction+0xa4>)
 8003640:	fba2 2303 	umull	r2, r3, r2, r3
 8003644:	0d5b      	lsrs	r3, r3, #21
 8003646:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800364a:	fb02 f303 	mul.w	r3, r2, r3
 800364e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003658:	d112      	bne.n	8003680 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2200      	movs	r2, #0
 8003662:	2180      	movs	r1, #128	@ 0x80
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f7ff ff47 	bl	80034f8 <SPI_WaitFlagStateUntilTimeout>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d016      	beq.n	800369e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003674:	f043 0220 	orr.w	r2, r3, #32
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e00f      	b.n	80036a0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	3b01      	subs	r3, #1
 800368a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003696:	2b80      	cmp	r3, #128	@ 0x80
 8003698:	d0f2      	beq.n	8003680 <SPI_EndRxTxTransaction+0x78>
 800369a:	e000      	b.n	800369e <SPI_EndRxTxTransaction+0x96>
        break;
 800369c:	bf00      	nop
  }

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	20000000 	.word	0x20000000
 80036ac:	165e9f81 	.word	0x165e9f81

080036b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e041      	b.n	8003746 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fd fa64 	bl	8000ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3304      	adds	r3, #4
 80036ec:	4619      	mov	r1, r3
 80036ee:	4610      	mov	r0, r2
 80036f0:	f000 fac0 	bl	8003c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b082      	sub	sp, #8
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e041      	b.n	80037e4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d106      	bne.n	800377a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f839 	bl	80037ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2202      	movs	r2, #2
 800377e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3304      	adds	r3, #4
 800378a:	4619      	mov	r1, r3
 800378c:	4610      	mov	r0, r2
 800378e:	f000 fa71 	bl	8003c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d109      	bne.n	8003824 <HAL_TIM_PWM_Start+0x24>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	bf14      	ite	ne
 800381c:	2301      	movne	r3, #1
 800381e:	2300      	moveq	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	e022      	b.n	800386a <HAL_TIM_PWM_Start+0x6a>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	2b04      	cmp	r3, #4
 8003828:	d109      	bne.n	800383e <HAL_TIM_PWM_Start+0x3e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b01      	cmp	r3, #1
 8003834:	bf14      	ite	ne
 8003836:	2301      	movne	r3, #1
 8003838:	2300      	moveq	r3, #0
 800383a:	b2db      	uxtb	r3, r3
 800383c:	e015      	b.n	800386a <HAL_TIM_PWM_Start+0x6a>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b08      	cmp	r3, #8
 8003842:	d109      	bne.n	8003858 <HAL_TIM_PWM_Start+0x58>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b01      	cmp	r3, #1
 800384e:	bf14      	ite	ne
 8003850:	2301      	movne	r3, #1
 8003852:	2300      	moveq	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	e008      	b.n	800386a <HAL_TIM_PWM_Start+0x6a>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b01      	cmp	r3, #1
 8003862:	bf14      	ite	ne
 8003864:	2301      	movne	r3, #1
 8003866:	2300      	moveq	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e068      	b.n	8003944 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d104      	bne.n	8003882 <HAL_TIM_PWM_Start+0x82>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003880:	e013      	b.n	80038aa <HAL_TIM_PWM_Start+0xaa>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b04      	cmp	r3, #4
 8003886:	d104      	bne.n	8003892 <HAL_TIM_PWM_Start+0x92>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003890:	e00b      	b.n	80038aa <HAL_TIM_PWM_Start+0xaa>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b08      	cmp	r3, #8
 8003896:	d104      	bne.n	80038a2 <HAL_TIM_PWM_Start+0xa2>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038a0:	e003      	b.n	80038aa <HAL_TIM_PWM_Start+0xaa>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2202      	movs	r2, #2
 80038a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2201      	movs	r2, #1
 80038b0:	6839      	ldr	r1, [r7, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 fc90 	bl	80041d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a23      	ldr	r2, [pc, #140]	@ (800394c <HAL_TIM_PWM_Start+0x14c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d107      	bne.n	80038d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a1d      	ldr	r2, [pc, #116]	@ (800394c <HAL_TIM_PWM_Start+0x14c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d018      	beq.n	800390e <HAL_TIM_PWM_Start+0x10e>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038e4:	d013      	beq.n	800390e <HAL_TIM_PWM_Start+0x10e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a19      	ldr	r2, [pc, #100]	@ (8003950 <HAL_TIM_PWM_Start+0x150>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00e      	beq.n	800390e <HAL_TIM_PWM_Start+0x10e>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a17      	ldr	r2, [pc, #92]	@ (8003954 <HAL_TIM_PWM_Start+0x154>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d009      	beq.n	800390e <HAL_TIM_PWM_Start+0x10e>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a16      	ldr	r2, [pc, #88]	@ (8003958 <HAL_TIM_PWM_Start+0x158>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d004      	beq.n	800390e <HAL_TIM_PWM_Start+0x10e>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a14      	ldr	r2, [pc, #80]	@ (800395c <HAL_TIM_PWM_Start+0x15c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d111      	bne.n	8003932 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b06      	cmp	r3, #6
 800391e:	d010      	beq.n	8003942 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0201 	orr.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003930:	e007      	b.n	8003942 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f042 0201 	orr.w	r2, r2, #1
 8003940:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40010000 	.word	0x40010000
 8003950:	40000400 	.word	0x40000400
 8003954:	40000800 	.word	0x40000800
 8003958:	40000c00 	.word	0x40000c00
 800395c:	40014000 	.word	0x40014000

08003960 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003976:	2b01      	cmp	r3, #1
 8003978:	d101      	bne.n	800397e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800397a:	2302      	movs	r3, #2
 800397c:	e0ae      	b.n	8003adc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b0c      	cmp	r3, #12
 800398a:	f200 809f 	bhi.w	8003acc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800398e:	a201      	add	r2, pc, #4	@ (adr r2, 8003994 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003994:	080039c9 	.word	0x080039c9
 8003998:	08003acd 	.word	0x08003acd
 800399c:	08003acd 	.word	0x08003acd
 80039a0:	08003acd 	.word	0x08003acd
 80039a4:	08003a09 	.word	0x08003a09
 80039a8:	08003acd 	.word	0x08003acd
 80039ac:	08003acd 	.word	0x08003acd
 80039b0:	08003acd 	.word	0x08003acd
 80039b4:	08003a4b 	.word	0x08003a4b
 80039b8:	08003acd 	.word	0x08003acd
 80039bc:	08003acd 	.word	0x08003acd
 80039c0:	08003acd 	.word	0x08003acd
 80039c4:	08003a8b 	.word	0x08003a8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68b9      	ldr	r1, [r7, #8]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 f9dc 	bl	8003d8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699a      	ldr	r2, [r3, #24]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0208 	orr.w	r2, r2, #8
 80039e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699a      	ldr	r2, [r3, #24]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0204 	bic.w	r2, r2, #4
 80039f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6999      	ldr	r1, [r3, #24]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	691a      	ldr	r2, [r3, #16]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	619a      	str	r2, [r3, #24]
      break;
 8003a06:	e064      	b.n	8003ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fa22 	bl	8003e58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699a      	ldr	r2, [r3, #24]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699a      	ldr	r2, [r3, #24]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6999      	ldr	r1, [r3, #24]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	021a      	lsls	r2, r3, #8
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	619a      	str	r2, [r3, #24]
      break;
 8003a48:	e043      	b.n	8003ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68b9      	ldr	r1, [r7, #8]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 fa6d 	bl	8003f30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69da      	ldr	r2, [r3, #28]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0208 	orr.w	r2, r2, #8
 8003a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	69da      	ldr	r2, [r3, #28]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0204 	bic.w	r2, r2, #4
 8003a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69d9      	ldr	r1, [r3, #28]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	61da      	str	r2, [r3, #28]
      break;
 8003a88:	e023      	b.n	8003ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68b9      	ldr	r1, [r7, #8]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 fab7 	bl	8004004 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69da      	ldr	r2, [r3, #28]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003aa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69da      	ldr	r2, [r3, #28]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69d9      	ldr	r1, [r3, #28]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	021a      	lsls	r2, r3, #8
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	61da      	str	r2, [r3, #28]
      break;
 8003aca:	e002      	b.n	8003ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	75fb      	strb	r3, [r7, #23]
      break;
 8003ad0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_TIM_ConfigClockSource+0x1c>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e0b4      	b.n	8003c6a <HAL_TIM_ConfigClockSource+0x186>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b38:	d03e      	beq.n	8003bb8 <HAL_TIM_ConfigClockSource+0xd4>
 8003b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b3e:	f200 8087 	bhi.w	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b46:	f000 8086 	beq.w	8003c56 <HAL_TIM_ConfigClockSource+0x172>
 8003b4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b4e:	d87f      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b50:	2b70      	cmp	r3, #112	@ 0x70
 8003b52:	d01a      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0xa6>
 8003b54:	2b70      	cmp	r3, #112	@ 0x70
 8003b56:	d87b      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b58:	2b60      	cmp	r3, #96	@ 0x60
 8003b5a:	d050      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0x11a>
 8003b5c:	2b60      	cmp	r3, #96	@ 0x60
 8003b5e:	d877      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b60:	2b50      	cmp	r3, #80	@ 0x50
 8003b62:	d03c      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0xfa>
 8003b64:	2b50      	cmp	r3, #80	@ 0x50
 8003b66:	d873      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b68:	2b40      	cmp	r3, #64	@ 0x40
 8003b6a:	d058      	beq.n	8003c1e <HAL_TIM_ConfigClockSource+0x13a>
 8003b6c:	2b40      	cmp	r3, #64	@ 0x40
 8003b6e:	d86f      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b70:	2b30      	cmp	r3, #48	@ 0x30
 8003b72:	d064      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x15a>
 8003b74:	2b30      	cmp	r3, #48	@ 0x30
 8003b76:	d86b      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d060      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x15a>
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d867      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d05c      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x15a>
 8003b84:	2b10      	cmp	r3, #16
 8003b86:	d05a      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x15a>
 8003b88:	e062      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b9a:	f000 fafd 	bl	8004198 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003bac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	609a      	str	r2, [r3, #8]
      break;
 8003bb6:	e04f      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bc8:	f000 fae6 	bl	8004198 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bda:	609a      	str	r2, [r3, #8]
      break;
 8003bdc:	e03c      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bea:	461a      	mov	r2, r3
 8003bec:	f000 fa5a 	bl	80040a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2150      	movs	r1, #80	@ 0x50
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fab3 	bl	8004162 <TIM_ITRx_SetConfig>
      break;
 8003bfc:	e02c      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	f000 fa79 	bl	8004102 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2160      	movs	r1, #96	@ 0x60
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 faa3 	bl	8004162 <TIM_ITRx_SetConfig>
      break;
 8003c1c:	e01c      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f000 fa3a 	bl	80040a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2140      	movs	r1, #64	@ 0x40
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fa93 	bl	8004162 <TIM_ITRx_SetConfig>
      break;
 8003c3c:	e00c      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4619      	mov	r1, r3
 8003c48:	4610      	mov	r0, r2
 8003c4a:	f000 fa8a 	bl	8004162 <TIM_ITRx_SetConfig>
      break;
 8003c4e:	e003      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	73fb      	strb	r3, [r7, #15]
      break;
 8003c54:	e000      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a3a      	ldr	r2, [pc, #232]	@ (8003d70 <TIM_Base_SetConfig+0xfc>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d00f      	beq.n	8003cac <TIM_Base_SetConfig+0x38>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c92:	d00b      	beq.n	8003cac <TIM_Base_SetConfig+0x38>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a37      	ldr	r2, [pc, #220]	@ (8003d74 <TIM_Base_SetConfig+0x100>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d007      	beq.n	8003cac <TIM_Base_SetConfig+0x38>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a36      	ldr	r2, [pc, #216]	@ (8003d78 <TIM_Base_SetConfig+0x104>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d003      	beq.n	8003cac <TIM_Base_SetConfig+0x38>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a35      	ldr	r2, [pc, #212]	@ (8003d7c <TIM_Base_SetConfig+0x108>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d108      	bne.n	8003cbe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a2b      	ldr	r2, [pc, #172]	@ (8003d70 <TIM_Base_SetConfig+0xfc>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d01b      	beq.n	8003cfe <TIM_Base_SetConfig+0x8a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ccc:	d017      	beq.n	8003cfe <TIM_Base_SetConfig+0x8a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a28      	ldr	r2, [pc, #160]	@ (8003d74 <TIM_Base_SetConfig+0x100>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d013      	beq.n	8003cfe <TIM_Base_SetConfig+0x8a>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a27      	ldr	r2, [pc, #156]	@ (8003d78 <TIM_Base_SetConfig+0x104>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00f      	beq.n	8003cfe <TIM_Base_SetConfig+0x8a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a26      	ldr	r2, [pc, #152]	@ (8003d7c <TIM_Base_SetConfig+0x108>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00b      	beq.n	8003cfe <TIM_Base_SetConfig+0x8a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a25      	ldr	r2, [pc, #148]	@ (8003d80 <TIM_Base_SetConfig+0x10c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d007      	beq.n	8003cfe <TIM_Base_SetConfig+0x8a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a24      	ldr	r2, [pc, #144]	@ (8003d84 <TIM_Base_SetConfig+0x110>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d003      	beq.n	8003cfe <TIM_Base_SetConfig+0x8a>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a23      	ldr	r2, [pc, #140]	@ (8003d88 <TIM_Base_SetConfig+0x114>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d108      	bne.n	8003d10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a0e      	ldr	r2, [pc, #56]	@ (8003d70 <TIM_Base_SetConfig+0xfc>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d103      	bne.n	8003d44 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d105      	bne.n	8003d62 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f023 0201 	bic.w	r2, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	611a      	str	r2, [r3, #16]
  }
}
 8003d62:	bf00      	nop
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40010000 	.word	0x40010000
 8003d74:	40000400 	.word	0x40000400
 8003d78:	40000800 	.word	0x40000800
 8003d7c:	40000c00 	.word	0x40000c00
 8003d80:	40014000 	.word	0x40014000
 8003d84:	40014400 	.word	0x40014400
 8003d88:	40014800 	.word	0x40014800

08003d8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	f023 0201 	bic.w	r2, r3, #1
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f023 0303 	bic.w	r3, r3, #3
 8003dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f023 0302 	bic.w	r3, r3, #2
 8003dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a1c      	ldr	r2, [pc, #112]	@ (8003e54 <TIM_OC1_SetConfig+0xc8>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d10c      	bne.n	8003e02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f023 0308 	bic.w	r3, r3, #8
 8003dee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f023 0304 	bic.w	r3, r3, #4
 8003e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a13      	ldr	r2, [pc, #76]	@ (8003e54 <TIM_OC1_SetConfig+0xc8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d111      	bne.n	8003e2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	621a      	str	r2, [r3, #32]
}
 8003e48:	bf00      	nop
 8003e4a:	371c      	adds	r7, #28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	40010000 	.word	0x40010000

08003e58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	f023 0210 	bic.w	r2, r3, #16
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	021b      	lsls	r3, r3, #8
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f023 0320 	bic.w	r3, r3, #32
 8003ea2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f2c <TIM_OC2_SetConfig+0xd4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d10d      	bne.n	8003ed4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ed2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a15      	ldr	r2, [pc, #84]	@ (8003f2c <TIM_OC2_SetConfig+0xd4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d113      	bne.n	8003f04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ee2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003eea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	621a      	str	r2, [r3, #32]
}
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40010000 	.word	0x40010000

08003f30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0303 	bic.w	r3, r3, #3
 8003f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	021b      	lsls	r3, r3, #8
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a1d      	ldr	r2, [pc, #116]	@ (8004000 <TIM_OC3_SetConfig+0xd0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d10d      	bne.n	8003faa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	021b      	lsls	r3, r3, #8
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a14      	ldr	r2, [pc, #80]	@ (8004000 <TIM_OC3_SetConfig+0xd0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d113      	bne.n	8003fda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	621a      	str	r2, [r3, #32]
}
 8003ff4:	bf00      	nop
 8003ff6:	371c      	adds	r7, #28
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	40010000 	.word	0x40010000

08004004 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800403a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	021b      	lsls	r3, r3, #8
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4313      	orrs	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800404e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	031b      	lsls	r3, r3, #12
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a10      	ldr	r2, [pc, #64]	@ (80040a0 <TIM_OC4_SetConfig+0x9c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d109      	bne.n	8004078 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800406a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	019b      	lsls	r3, r3, #6
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	4313      	orrs	r3, r2
 8004076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	621a      	str	r2, [r3, #32]
}
 8004092:	bf00      	nop
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40010000 	.word	0x40010000

080040a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	f023 0201 	bic.w	r2, r3, #1
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f023 030a 	bic.w	r3, r3, #10
 80040e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	621a      	str	r2, [r3, #32]
}
 80040f6:	bf00      	nop
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004102:	b480      	push	{r7}
 8004104:	b087      	sub	sp, #28
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	f023 0210 	bic.w	r2, r3, #16
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800412c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	031b      	lsls	r3, r3, #12
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800413e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	4313      	orrs	r3, r2
 8004148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	621a      	str	r2, [r3, #32]
}
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004162:	b480      	push	{r7}
 8004164:	b085      	sub	sp, #20
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004178:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	f043 0307 	orr.w	r3, r3, #7
 8004184:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	609a      	str	r2, [r3, #8]
}
 800418c:	bf00      	nop
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	021a      	lsls	r2, r3, #8
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4313      	orrs	r3, r2
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	609a      	str	r2, [r3, #8]
}
 80041cc:	bf00      	nop
 80041ce:	371c      	adds	r7, #28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f003 031f 	and.w	r3, r3, #31
 80041ea:	2201      	movs	r2, #1
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a1a      	ldr	r2, [r3, #32]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	43db      	mvns	r3, r3
 80041fa:	401a      	ands	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a1a      	ldr	r2, [r3, #32]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f003 031f 	and.w	r3, r3, #31
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	fa01 f303 	lsl.w	r3, r1, r3
 8004210:	431a      	orrs	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	621a      	str	r2, [r3, #32]
}
 8004216:	bf00      	nop
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
	...

08004224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004238:	2302      	movs	r3, #2
 800423a:	e050      	b.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004262:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a1c      	ldr	r2, [pc, #112]	@ (80042ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d018      	beq.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004288:	d013      	beq.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a18      	ldr	r2, [pc, #96]	@ (80042f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00e      	beq.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a16      	ldr	r2, [pc, #88]	@ (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d009      	beq.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a15      	ldr	r2, [pc, #84]	@ (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d004      	beq.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a13      	ldr	r2, [pc, #76]	@ (80042fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d10c      	bne.n	80042cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	40010000 	.word	0x40010000
 80042f0:	40000400 	.word	0x40000400
 80042f4:	40000800 	.word	0x40000800
 80042f8:	40000c00 	.word	0x40000c00
 80042fc:	40014000 	.word	0x40014000

08004300 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e042      	b.n	8004398 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fc fc5c 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2224      	movs	r2, #36	@ 0x24
 8004330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004342:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f82b 	bl	80043a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004358:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695a      	ldr	r2, [r3, #20]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004368:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004378:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043a4:	b0c0      	sub	sp, #256	@ 0x100
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043bc:	68d9      	ldr	r1, [r3, #12]
 80043be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	ea40 0301 	orr.w	r3, r0, r1
 80043c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	431a      	orrs	r2, r3
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80043f8:	f021 010c 	bic.w	r1, r1, #12
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004406:	430b      	orrs	r3, r1
 8004408:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800440a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441a:	6999      	ldr	r1, [r3, #24]
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	ea40 0301 	orr.w	r3, r0, r1
 8004426:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	4b8f      	ldr	r3, [pc, #572]	@ (800466c <UART_SetConfig+0x2cc>)
 8004430:	429a      	cmp	r2, r3
 8004432:	d005      	beq.n	8004440 <UART_SetConfig+0xa0>
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	4b8d      	ldr	r3, [pc, #564]	@ (8004670 <UART_SetConfig+0x2d0>)
 800443c:	429a      	cmp	r2, r3
 800443e:	d104      	bne.n	800444a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004440:	f7fe fbbe 	bl	8002bc0 <HAL_RCC_GetPCLK2Freq>
 8004444:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004448:	e003      	b.n	8004452 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800444a:	f7fe fba5 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
 800444e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800445c:	f040 810c 	bne.w	8004678 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004464:	2200      	movs	r2, #0
 8004466:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800446a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800446e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004472:	4622      	mov	r2, r4
 8004474:	462b      	mov	r3, r5
 8004476:	1891      	adds	r1, r2, r2
 8004478:	65b9      	str	r1, [r7, #88]	@ 0x58
 800447a:	415b      	adcs	r3, r3
 800447c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800447e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004482:	4621      	mov	r1, r4
 8004484:	eb12 0801 	adds.w	r8, r2, r1
 8004488:	4629      	mov	r1, r5
 800448a:	eb43 0901 	adc.w	r9, r3, r1
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	f04f 0300 	mov.w	r3, #0
 8004496:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800449a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800449e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044a2:	4690      	mov	r8, r2
 80044a4:	4699      	mov	r9, r3
 80044a6:	4623      	mov	r3, r4
 80044a8:	eb18 0303 	adds.w	r3, r8, r3
 80044ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80044b0:	462b      	mov	r3, r5
 80044b2:	eb49 0303 	adc.w	r3, r9, r3
 80044b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80044ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80044c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80044ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80044ce:	460b      	mov	r3, r1
 80044d0:	18db      	adds	r3, r3, r3
 80044d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80044d4:	4613      	mov	r3, r2
 80044d6:	eb42 0303 	adc.w	r3, r2, r3
 80044da:	657b      	str	r3, [r7, #84]	@ 0x54
 80044dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80044e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80044e4:	f7fb fe78 	bl	80001d8 <__aeabi_uldivmod>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4b61      	ldr	r3, [pc, #388]	@ (8004674 <UART_SetConfig+0x2d4>)
 80044ee:	fba3 2302 	umull	r2, r3, r3, r2
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	011c      	lsls	r4, r3, #4
 80044f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044fa:	2200      	movs	r2, #0
 80044fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004500:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004504:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004508:	4642      	mov	r2, r8
 800450a:	464b      	mov	r3, r9
 800450c:	1891      	adds	r1, r2, r2
 800450e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004510:	415b      	adcs	r3, r3
 8004512:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004514:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004518:	4641      	mov	r1, r8
 800451a:	eb12 0a01 	adds.w	sl, r2, r1
 800451e:	4649      	mov	r1, r9
 8004520:	eb43 0b01 	adc.w	fp, r3, r1
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004530:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004534:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004538:	4692      	mov	sl, r2
 800453a:	469b      	mov	fp, r3
 800453c:	4643      	mov	r3, r8
 800453e:	eb1a 0303 	adds.w	r3, sl, r3
 8004542:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004546:	464b      	mov	r3, r9
 8004548:	eb4b 0303 	adc.w	r3, fp, r3
 800454c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800455c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004560:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004564:	460b      	mov	r3, r1
 8004566:	18db      	adds	r3, r3, r3
 8004568:	643b      	str	r3, [r7, #64]	@ 0x40
 800456a:	4613      	mov	r3, r2
 800456c:	eb42 0303 	adc.w	r3, r2, r3
 8004570:	647b      	str	r3, [r7, #68]	@ 0x44
 8004572:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004576:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800457a:	f7fb fe2d 	bl	80001d8 <__aeabi_uldivmod>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4611      	mov	r1, r2
 8004584:	4b3b      	ldr	r3, [pc, #236]	@ (8004674 <UART_SetConfig+0x2d4>)
 8004586:	fba3 2301 	umull	r2, r3, r3, r1
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	2264      	movs	r2, #100	@ 0x64
 800458e:	fb02 f303 	mul.w	r3, r2, r3
 8004592:	1acb      	subs	r3, r1, r3
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800459a:	4b36      	ldr	r3, [pc, #216]	@ (8004674 <UART_SetConfig+0x2d4>)
 800459c:	fba3 2302 	umull	r2, r3, r3, r2
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80045a8:	441c      	add	r4, r3
 80045aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80045b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80045bc:	4642      	mov	r2, r8
 80045be:	464b      	mov	r3, r9
 80045c0:	1891      	adds	r1, r2, r2
 80045c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80045c4:	415b      	adcs	r3, r3
 80045c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80045cc:	4641      	mov	r1, r8
 80045ce:	1851      	adds	r1, r2, r1
 80045d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80045d2:	4649      	mov	r1, r9
 80045d4:	414b      	adcs	r3, r1
 80045d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80045e4:	4659      	mov	r1, fp
 80045e6:	00cb      	lsls	r3, r1, #3
 80045e8:	4651      	mov	r1, sl
 80045ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ee:	4651      	mov	r1, sl
 80045f0:	00ca      	lsls	r2, r1, #3
 80045f2:	4610      	mov	r0, r2
 80045f4:	4619      	mov	r1, r3
 80045f6:	4603      	mov	r3, r0
 80045f8:	4642      	mov	r2, r8
 80045fa:	189b      	adds	r3, r3, r2
 80045fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004600:	464b      	mov	r3, r9
 8004602:	460a      	mov	r2, r1
 8004604:	eb42 0303 	adc.w	r3, r2, r3
 8004608:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800460c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004618:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800461c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004620:	460b      	mov	r3, r1
 8004622:	18db      	adds	r3, r3, r3
 8004624:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004626:	4613      	mov	r3, r2
 8004628:	eb42 0303 	adc.w	r3, r2, r3
 800462c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800462e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004632:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004636:	f7fb fdcf 	bl	80001d8 <__aeabi_uldivmod>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	4b0d      	ldr	r3, [pc, #52]	@ (8004674 <UART_SetConfig+0x2d4>)
 8004640:	fba3 1302 	umull	r1, r3, r3, r2
 8004644:	095b      	lsrs	r3, r3, #5
 8004646:	2164      	movs	r1, #100	@ 0x64
 8004648:	fb01 f303 	mul.w	r3, r1, r3
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	3332      	adds	r3, #50	@ 0x32
 8004652:	4a08      	ldr	r2, [pc, #32]	@ (8004674 <UART_SetConfig+0x2d4>)
 8004654:	fba2 2303 	umull	r2, r3, r2, r3
 8004658:	095b      	lsrs	r3, r3, #5
 800465a:	f003 0207 	and.w	r2, r3, #7
 800465e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4422      	add	r2, r4
 8004666:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004668:	e106      	b.n	8004878 <UART_SetConfig+0x4d8>
 800466a:	bf00      	nop
 800466c:	40011000 	.word	0x40011000
 8004670:	40011400 	.word	0x40011400
 8004674:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800467c:	2200      	movs	r2, #0
 800467e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004682:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004686:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800468a:	4642      	mov	r2, r8
 800468c:	464b      	mov	r3, r9
 800468e:	1891      	adds	r1, r2, r2
 8004690:	6239      	str	r1, [r7, #32]
 8004692:	415b      	adcs	r3, r3
 8004694:	627b      	str	r3, [r7, #36]	@ 0x24
 8004696:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800469a:	4641      	mov	r1, r8
 800469c:	1854      	adds	r4, r2, r1
 800469e:	4649      	mov	r1, r9
 80046a0:	eb43 0501 	adc.w	r5, r3, r1
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	00eb      	lsls	r3, r5, #3
 80046ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046b2:	00e2      	lsls	r2, r4, #3
 80046b4:	4614      	mov	r4, r2
 80046b6:	461d      	mov	r5, r3
 80046b8:	4643      	mov	r3, r8
 80046ba:	18e3      	adds	r3, r4, r3
 80046bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046c0:	464b      	mov	r3, r9
 80046c2:	eb45 0303 	adc.w	r3, r5, r3
 80046c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80046d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80046e6:	4629      	mov	r1, r5
 80046e8:	008b      	lsls	r3, r1, #2
 80046ea:	4621      	mov	r1, r4
 80046ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046f0:	4621      	mov	r1, r4
 80046f2:	008a      	lsls	r2, r1, #2
 80046f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80046f8:	f7fb fd6e 	bl	80001d8 <__aeabi_uldivmod>
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	4b60      	ldr	r3, [pc, #384]	@ (8004884 <UART_SetConfig+0x4e4>)
 8004702:	fba3 2302 	umull	r2, r3, r3, r2
 8004706:	095b      	lsrs	r3, r3, #5
 8004708:	011c      	lsls	r4, r3, #4
 800470a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800470e:	2200      	movs	r2, #0
 8004710:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004714:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004718:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800471c:	4642      	mov	r2, r8
 800471e:	464b      	mov	r3, r9
 8004720:	1891      	adds	r1, r2, r2
 8004722:	61b9      	str	r1, [r7, #24]
 8004724:	415b      	adcs	r3, r3
 8004726:	61fb      	str	r3, [r7, #28]
 8004728:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800472c:	4641      	mov	r1, r8
 800472e:	1851      	adds	r1, r2, r1
 8004730:	6139      	str	r1, [r7, #16]
 8004732:	4649      	mov	r1, r9
 8004734:	414b      	adcs	r3, r1
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004744:	4659      	mov	r1, fp
 8004746:	00cb      	lsls	r3, r1, #3
 8004748:	4651      	mov	r1, sl
 800474a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800474e:	4651      	mov	r1, sl
 8004750:	00ca      	lsls	r2, r1, #3
 8004752:	4610      	mov	r0, r2
 8004754:	4619      	mov	r1, r3
 8004756:	4603      	mov	r3, r0
 8004758:	4642      	mov	r2, r8
 800475a:	189b      	adds	r3, r3, r2
 800475c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004760:	464b      	mov	r3, r9
 8004762:	460a      	mov	r2, r1
 8004764:	eb42 0303 	adc.w	r3, r2, r3
 8004768:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800476c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004776:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004778:	f04f 0200 	mov.w	r2, #0
 800477c:	f04f 0300 	mov.w	r3, #0
 8004780:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004784:	4649      	mov	r1, r9
 8004786:	008b      	lsls	r3, r1, #2
 8004788:	4641      	mov	r1, r8
 800478a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800478e:	4641      	mov	r1, r8
 8004790:	008a      	lsls	r2, r1, #2
 8004792:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004796:	f7fb fd1f 	bl	80001d8 <__aeabi_uldivmod>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	4611      	mov	r1, r2
 80047a0:	4b38      	ldr	r3, [pc, #224]	@ (8004884 <UART_SetConfig+0x4e4>)
 80047a2:	fba3 2301 	umull	r2, r3, r3, r1
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	2264      	movs	r2, #100	@ 0x64
 80047aa:	fb02 f303 	mul.w	r3, r2, r3
 80047ae:	1acb      	subs	r3, r1, r3
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	3332      	adds	r3, #50	@ 0x32
 80047b4:	4a33      	ldr	r2, [pc, #204]	@ (8004884 <UART_SetConfig+0x4e4>)
 80047b6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ba:	095b      	lsrs	r3, r3, #5
 80047bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047c0:	441c      	add	r4, r3
 80047c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047c6:	2200      	movs	r2, #0
 80047c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80047ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80047cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80047d0:	4642      	mov	r2, r8
 80047d2:	464b      	mov	r3, r9
 80047d4:	1891      	adds	r1, r2, r2
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	415b      	adcs	r3, r3
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047e0:	4641      	mov	r1, r8
 80047e2:	1851      	adds	r1, r2, r1
 80047e4:	6039      	str	r1, [r7, #0]
 80047e6:	4649      	mov	r1, r9
 80047e8:	414b      	adcs	r3, r1
 80047ea:	607b      	str	r3, [r7, #4]
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047f8:	4659      	mov	r1, fp
 80047fa:	00cb      	lsls	r3, r1, #3
 80047fc:	4651      	mov	r1, sl
 80047fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004802:	4651      	mov	r1, sl
 8004804:	00ca      	lsls	r2, r1, #3
 8004806:	4610      	mov	r0, r2
 8004808:	4619      	mov	r1, r3
 800480a:	4603      	mov	r3, r0
 800480c:	4642      	mov	r2, r8
 800480e:	189b      	adds	r3, r3, r2
 8004810:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004812:	464b      	mov	r3, r9
 8004814:	460a      	mov	r2, r1
 8004816:	eb42 0303 	adc.w	r3, r2, r3
 800481a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	663b      	str	r3, [r7, #96]	@ 0x60
 8004826:	667a      	str	r2, [r7, #100]	@ 0x64
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004834:	4649      	mov	r1, r9
 8004836:	008b      	lsls	r3, r1, #2
 8004838:	4641      	mov	r1, r8
 800483a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800483e:	4641      	mov	r1, r8
 8004840:	008a      	lsls	r2, r1, #2
 8004842:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004846:	f7fb fcc7 	bl	80001d8 <__aeabi_uldivmod>
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	4b0d      	ldr	r3, [pc, #52]	@ (8004884 <UART_SetConfig+0x4e4>)
 8004850:	fba3 1302 	umull	r1, r3, r3, r2
 8004854:	095b      	lsrs	r3, r3, #5
 8004856:	2164      	movs	r1, #100	@ 0x64
 8004858:	fb01 f303 	mul.w	r3, r1, r3
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	3332      	adds	r3, #50	@ 0x32
 8004862:	4a08      	ldr	r2, [pc, #32]	@ (8004884 <UART_SetConfig+0x4e4>)
 8004864:	fba2 2303 	umull	r2, r3, r2, r3
 8004868:	095b      	lsrs	r3, r3, #5
 800486a:	f003 020f 	and.w	r2, r3, #15
 800486e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4422      	add	r2, r4
 8004876:	609a      	str	r2, [r3, #8]
}
 8004878:	bf00      	nop
 800487a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800487e:	46bd      	mov	sp, r7
 8004880:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004884:	51eb851f 	.word	0x51eb851f

08004888 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800488c:	4904      	ldr	r1, [pc, #16]	@ (80048a0 <MX_FATFS_Init+0x18>)
 800488e:	4805      	ldr	r0, [pc, #20]	@ (80048a4 <MX_FATFS_Init+0x1c>)
 8004890:	f000 fd90 	bl	80053b4 <FATFS_LinkDriver>
 8004894:	4603      	mov	r3, r0
 8004896:	461a      	mov	r2, r3
 8004898:	4b03      	ldr	r3, [pc, #12]	@ (80048a8 <MX_FATFS_Init+0x20>)
 800489a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800489c:	bf00      	nop
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	200009d8 	.word	0x200009d8
 80048a4:	2000000c 	.word	0x2000000c
 80048a8:	200009d4 	.word	0x200009d4

080048ac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	4603      	mov	r3, r0
 80048b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 80048b6:	79fb      	ldrb	r3, [r7, #7]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 f9db 	bl	8004c74 <USER_SPI_initialize>
 80048be:	4603      	mov	r3, r0
 80048c0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b082      	sub	sp, #8
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	4603      	mov	r3, r0
 80048d2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 80048d4:	79fb      	ldrb	r3, [r7, #7]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 fab8 	bl	8004e4c <USER_SPI_status>
 80048dc:	4603      	mov	r3, r0
 80048de:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	607a      	str	r2, [r7, #4]
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	4603      	mov	r3, r0
 80048f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 80048f8:	7bf8      	ldrb	r0, [r7, #15]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	68b9      	ldr	r1, [r7, #8]
 8004900:	f000 faba 	bl	8004e78 <USER_SPI_read>
 8004904:	4603      	mov	r3, r0
 8004906:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	607a      	str	r2, [r7, #4]
 800491a:	603b      	str	r3, [r7, #0]
 800491c:	4603      	mov	r3, r0
 800491e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8004920:	7bf8      	ldrb	r0, [r7, #15]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	68b9      	ldr	r1, [r7, #8]
 8004928:	f000 fb0c 	bl	8004f44 <USER_SPI_write>
 800492c:	4603      	mov	r3, r0
 800492e:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	4603      	mov	r3, r0
 8004940:	603a      	str	r2, [r7, #0]
 8004942:	71fb      	strb	r3, [r7, #7]
 8004944:	460b      	mov	r3, r1
 8004946:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8004948:	79fb      	ldrb	r3, [r7, #7]
 800494a:	79b9      	ldrb	r1, [r7, #6]
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f000 fb74 	bl	800503c <USER_SPI_ioctl>
 8004954:	4603      	mov	r3, r0
 8004956:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8004958:	4618      	mov	r0, r3
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004968:	f7fc fa6a 	bl	8000e40 <HAL_GetTick>
 800496c:	4603      	mov	r3, r0
 800496e:	4a04      	ldr	r2, [pc, #16]	@ (8004980 <SPI_Timer_On+0x20>)
 8004970:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8004972:	4a04      	ldr	r2, [pc, #16]	@ (8004984 <SPI_Timer_On+0x24>)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6013      	str	r3, [r2, #0]
}
 8004978:	bf00      	nop
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	200009e0 	.word	0x200009e0
 8004984:	200009e4 	.word	0x200009e4

08004988 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800498c:	f7fc fa58 	bl	8000e40 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	4b06      	ldr	r3, [pc, #24]	@ (80049ac <SPI_Timer_Status+0x24>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	1ad2      	subs	r2, r2, r3
 8004998:	4b05      	ldr	r3, [pc, #20]	@ (80049b0 <SPI_Timer_Status+0x28>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	429a      	cmp	r2, r3
 800499e:	bf34      	ite	cc
 80049a0:	2301      	movcc	r3, #1
 80049a2:	2300      	movcs	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	200009e0 	.word	0x200009e0
 80049b0:	200009e4 	.word	0x200009e4

080049b4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	4603      	mov	r3, r0
 80049bc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80049be:	f107 020f 	add.w	r2, r7, #15
 80049c2:	1df9      	adds	r1, r7, #7
 80049c4:	2332      	movs	r3, #50	@ 0x32
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	2301      	movs	r3, #1
 80049ca:	4804      	ldr	r0, [pc, #16]	@ (80049dc <xchg_spi+0x28>)
 80049cc:	f7fe fad9 	bl	8002f82 <HAL_SPI_TransmitReceive>
    return rxDat;
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	200000e8 	.word	0x200000e8

080049e0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80049e0:	b590      	push	{r4, r7, lr}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	e00a      	b.n	8004a06 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	18d4      	adds	r4, r2, r3
 80049f6:	20ff      	movs	r0, #255	@ 0xff
 80049f8:	f7ff ffdc 	bl	80049b4 <xchg_spi>
 80049fc:	4603      	mov	r3, r0
 80049fe:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	3301      	adds	r3, #1
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d3f0      	bcc.n	80049f0 <rcvr_spi_multi+0x10>
	}
}
 8004a0e:	bf00      	nop
 8004a10:	bf00      	nop
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd90      	pop	{r4, r7, pc}

08004a18 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	f04f 33ff 	mov.w	r3, #4294967295
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	4803      	ldr	r0, [pc, #12]	@ (8004a3c <xmit_spi_multi+0x24>)
 8004a2e:	f7fe f964 	bl	8002cfa <HAL_SPI_Transmit>
}
 8004a32:	bf00      	nop
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	200000e8 	.word	0x200000e8

08004a40 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8004a48:	f7fc f9fa 	bl	8000e40 <HAL_GetTick>
 8004a4c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004a52:	20ff      	movs	r0, #255	@ 0xff
 8004a54:	f7ff ffae 	bl	80049b4 <xchg_spi>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	2bff      	cmp	r3, #255	@ 0xff
 8004a60:	d007      	beq.n	8004a72 <wait_ready+0x32>
 8004a62:	f7fc f9ed 	bl	8000e40 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d8ef      	bhi.n	8004a52 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
 8004a74:	2bff      	cmp	r3, #255	@ 0xff
 8004a76:	bf0c      	ite	eq
 8004a78:	2301      	moveq	r3, #1
 8004a7a:	2300      	movne	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004a92:	4804      	ldr	r0, [pc, #16]	@ (8004aa4 <despiselect+0x1c>)
 8004a94:	f7fd fbf6 	bl	8002284 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8004a98:	20ff      	movs	r0, #255	@ 0xff
 8004a9a:	f7ff ff8b 	bl	80049b4 <xchg_spi>

}
 8004a9e:	bf00      	nop
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40020000 	.word	0x40020000

08004aa8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8004aac:	2200      	movs	r2, #0
 8004aae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004ab2:	480a      	ldr	r0, [pc, #40]	@ (8004adc <spiselect+0x34>)
 8004ab4:	f7fd fbe6 	bl	8002284 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8004ab8:	20ff      	movs	r0, #255	@ 0xff
 8004aba:	f7ff ff7b 	bl	80049b4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8004abe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004ac2:	f7ff ffbd 	bl	8004a40 <wait_ready>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <spiselect+0x28>
 8004acc:	2301      	movs	r3, #1
 8004ace:	e002      	b.n	8004ad6 <spiselect+0x2e>

	despiselect();
 8004ad0:	f7ff ffda 	bl	8004a88 <despiselect>
	return 0;	/* Timeout */
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	40020000 	.word	0x40020000

08004ae0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8004aea:	20c8      	movs	r0, #200	@ 0xc8
 8004aec:	f7ff ff38 	bl	8004960 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004af0:	20ff      	movs	r0, #255	@ 0xff
 8004af2:	f7ff ff5f 	bl	80049b4 <xchg_spi>
 8004af6:	4603      	mov	r3, r0
 8004af8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
 8004afc:	2bff      	cmp	r3, #255	@ 0xff
 8004afe:	d104      	bne.n	8004b0a <rcvr_datablock+0x2a>
 8004b00:	f7ff ff42 	bl	8004988 <SPI_Timer_Status>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f2      	bne.n	8004af0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8004b0a:	7bfb      	ldrb	r3, [r7, #15]
 8004b0c:	2bfe      	cmp	r3, #254	@ 0xfe
 8004b0e:	d001      	beq.n	8004b14 <rcvr_datablock+0x34>
 8004b10:	2300      	movs	r3, #0
 8004b12:	e00a      	b.n	8004b2a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004b14:	6839      	ldr	r1, [r7, #0]
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff ff62 	bl	80049e0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004b1c:	20ff      	movs	r0, #255	@ 0xff
 8004b1e:	f7ff ff49 	bl	80049b4 <xchg_spi>
 8004b22:	20ff      	movs	r0, #255	@ 0xff
 8004b24:	f7ff ff46 	bl	80049b4 <xchg_spi>

	return 1;						/* Function succeeded */
 8004b28:	2301      	movs	r3, #1
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b084      	sub	sp, #16
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8004b3e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004b42:	f7ff ff7d 	bl	8004a40 <wait_ready>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <xmit_datablock+0x1e>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	e01e      	b.n	8004b8e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8004b50:	78fb      	ldrb	r3, [r7, #3]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7ff ff2e 	bl	80049b4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	2bfd      	cmp	r3, #253	@ 0xfd
 8004b5c:	d016      	beq.n	8004b8c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8004b5e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7ff ff58 	bl	8004a18 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8004b68:	20ff      	movs	r0, #255	@ 0xff
 8004b6a:	f7ff ff23 	bl	80049b4 <xchg_spi>
 8004b6e:	20ff      	movs	r0, #255	@ 0xff
 8004b70:	f7ff ff20 	bl	80049b4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8004b74:	20ff      	movs	r0, #255	@ 0xff
 8004b76:	f7ff ff1d 	bl	80049b4 <xchg_spi>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
 8004b80:	f003 031f 	and.w	r3, r3, #31
 8004b84:	2b05      	cmp	r3, #5
 8004b86:	d001      	beq.n	8004b8c <xmit_datablock+0x5a>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	e000      	b.n	8004b8e <xmit_datablock+0x5c>
	}
	return 1;
 8004b8c:	2301      	movs	r3, #1
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b084      	sub	sp, #16
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	6039      	str	r1, [r7, #0]
 8004ba0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8004ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	da0e      	bge.n	8004bc8 <send_cmd+0x32>
		cmd &= 0x7F;
 8004baa:	79fb      	ldrb	r3, [r7, #7]
 8004bac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bb0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	2037      	movs	r0, #55	@ 0x37
 8004bb6:	f7ff ffee 	bl	8004b96 <send_cmd>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8004bbe:	7bbb      	ldrb	r3, [r7, #14]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d901      	bls.n	8004bc8 <send_cmd+0x32>
 8004bc4:	7bbb      	ldrb	r3, [r7, #14]
 8004bc6:	e051      	b.n	8004c6c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8004bc8:	79fb      	ldrb	r3, [r7, #7]
 8004bca:	2b0c      	cmp	r3, #12
 8004bcc:	d008      	beq.n	8004be0 <send_cmd+0x4a>
		despiselect();
 8004bce:	f7ff ff5b 	bl	8004a88 <despiselect>
		if (!spiselect()) return 0xFF;
 8004bd2:	f7ff ff69 	bl	8004aa8 <spiselect>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <send_cmd+0x4a>
 8004bdc:	23ff      	movs	r3, #255	@ 0xff
 8004bde:	e045      	b.n	8004c6c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8004be0:	79fb      	ldrb	r3, [r7, #7]
 8004be2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff fee3 	bl	80049b4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	0e1b      	lsrs	r3, r3, #24
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff fedd 	bl	80049b4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	0c1b      	lsrs	r3, r3, #16
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff fed7 	bl	80049b4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	0a1b      	lsrs	r3, r3, #8
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7ff fed1 	bl	80049b4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff fecc 	bl	80049b4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8004c20:	79fb      	ldrb	r3, [r7, #7]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <send_cmd+0x94>
 8004c26:	2395      	movs	r3, #149	@ 0x95
 8004c28:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d101      	bne.n	8004c34 <send_cmd+0x9e>
 8004c30:	2387      	movs	r3, #135	@ 0x87
 8004c32:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff febc 	bl	80049b4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
 8004c3e:	2b0c      	cmp	r3, #12
 8004c40:	d102      	bne.n	8004c48 <send_cmd+0xb2>
 8004c42:	20ff      	movs	r0, #255	@ 0xff
 8004c44:	f7ff feb6 	bl	80049b4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8004c48:	230a      	movs	r3, #10
 8004c4a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8004c4c:	20ff      	movs	r0, #255	@ 0xff
 8004c4e:	f7ff feb1 	bl	80049b4 <xchg_spi>
 8004c52:	4603      	mov	r3, r0
 8004c54:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8004c56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	da05      	bge.n	8004c6a <send_cmd+0xd4>
 8004c5e:	7bfb      	ldrb	r3, [r7, #15]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	73fb      	strb	r3, [r7, #15]
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1f0      	bne.n	8004c4c <send_cmd+0xb6>

	return res;							/* Return received response */
 8004c6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004c74:	b590      	push	{r4, r7, lr}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8004c7e:	79fb      	ldrb	r3, [r7, #7]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <USER_SPI_initialize+0x14>
 8004c84:	2301      	movs	r3, #1
 8004c86:	e0d6      	b.n	8004e36 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8004c88:	4b6d      	ldr	r3, [pc, #436]	@ (8004e40 <USER_SPI_initialize+0x1cc>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <USER_SPI_initialize+0x2a>
 8004c96:	4b6a      	ldr	r3, [pc, #424]	@ (8004e40 <USER_SPI_initialize+0x1cc>)
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	e0cb      	b.n	8004e36 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8004c9e:	4b69      	ldr	r3, [pc, #420]	@ (8004e44 <USER_SPI_initialize+0x1d0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8004ca8:	4b66      	ldr	r3, [pc, #408]	@ (8004e44 <USER_SPI_initialize+0x1d0>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8004cb0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8004cb2:	230a      	movs	r3, #10
 8004cb4:	73fb      	strb	r3, [r7, #15]
 8004cb6:	e005      	b.n	8004cc4 <USER_SPI_initialize+0x50>
 8004cb8:	20ff      	movs	r0, #255	@ 0xff
 8004cba:	f7ff fe7b 	bl	80049b4 <xchg_spi>
 8004cbe:	7bfb      	ldrb	r3, [r7, #15]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	73fb      	strb	r3, [r7, #15]
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f6      	bne.n	8004cb8 <USER_SPI_initialize+0x44>

	ty = 0;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8004cce:	2100      	movs	r1, #0
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	f7ff ff60 	bl	8004b96 <send_cmd>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	f040 808b 	bne.w	8004df4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8004cde:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004ce2:	f7ff fe3d 	bl	8004960 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8004ce6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8004cea:	2008      	movs	r0, #8
 8004cec:	f7ff ff53 	bl	8004b96 <send_cmd>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d151      	bne.n	8004d9a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	73fb      	strb	r3, [r7, #15]
 8004cfa:	e00d      	b.n	8004d18 <USER_SPI_initialize+0xa4>
 8004cfc:	7bfc      	ldrb	r4, [r7, #15]
 8004cfe:	20ff      	movs	r0, #255	@ 0xff
 8004d00:	f7ff fe58 	bl	80049b4 <xchg_spi>
 8004d04:	4603      	mov	r3, r0
 8004d06:	461a      	mov	r2, r3
 8004d08:	f104 0310 	add.w	r3, r4, #16
 8004d0c:	443b      	add	r3, r7
 8004d0e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
 8004d14:	3301      	adds	r3, #1
 8004d16:	73fb      	strb	r3, [r7, #15]
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d9ee      	bls.n	8004cfc <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8004d1e:	7abb      	ldrb	r3, [r7, #10]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d167      	bne.n	8004df4 <USER_SPI_initialize+0x180>
 8004d24:	7afb      	ldrb	r3, [r7, #11]
 8004d26:	2baa      	cmp	r3, #170	@ 0xaa
 8004d28:	d164      	bne.n	8004df4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8004d2a:	bf00      	nop
 8004d2c:	f7ff fe2c 	bl	8004988 <SPI_Timer_Status>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d007      	beq.n	8004d46 <USER_SPI_initialize+0xd2>
 8004d36:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004d3a:	20a9      	movs	r0, #169	@ 0xa9
 8004d3c:	f7ff ff2b 	bl	8004b96 <send_cmd>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1f2      	bne.n	8004d2c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8004d46:	f7ff fe1f 	bl	8004988 <SPI_Timer_Status>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d051      	beq.n	8004df4 <USER_SPI_initialize+0x180>
 8004d50:	2100      	movs	r1, #0
 8004d52:	203a      	movs	r0, #58	@ 0x3a
 8004d54:	f7ff ff1f 	bl	8004b96 <send_cmd>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d14a      	bne.n	8004df4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8004d5e:	2300      	movs	r3, #0
 8004d60:	73fb      	strb	r3, [r7, #15]
 8004d62:	e00d      	b.n	8004d80 <USER_SPI_initialize+0x10c>
 8004d64:	7bfc      	ldrb	r4, [r7, #15]
 8004d66:	20ff      	movs	r0, #255	@ 0xff
 8004d68:	f7ff fe24 	bl	80049b4 <xchg_spi>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	461a      	mov	r2, r3
 8004d70:	f104 0310 	add.w	r3, r4, #16
 8004d74:	443b      	add	r3, r7
 8004d76:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004d7a:	7bfb      	ldrb	r3, [r7, #15]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	73fb      	strb	r3, [r7, #15]
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d9ee      	bls.n	8004d64 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8004d86:	7a3b      	ldrb	r3, [r7, #8]
 8004d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <USER_SPI_initialize+0x120>
 8004d90:	230c      	movs	r3, #12
 8004d92:	e000      	b.n	8004d96 <USER_SPI_initialize+0x122>
 8004d94:	2304      	movs	r3, #4
 8004d96:	737b      	strb	r3, [r7, #13]
 8004d98:	e02c      	b.n	8004df4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	20a9      	movs	r0, #169	@ 0xa9
 8004d9e:	f7ff fefa 	bl	8004b96 <send_cmd>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d804      	bhi.n	8004db2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8004da8:	2302      	movs	r3, #2
 8004daa:	737b      	strb	r3, [r7, #13]
 8004dac:	23a9      	movs	r3, #169	@ 0xa9
 8004dae:	73bb      	strb	r3, [r7, #14]
 8004db0:	e003      	b.n	8004dba <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8004db2:	2301      	movs	r3, #1
 8004db4:	737b      	strb	r3, [r7, #13]
 8004db6:	2301      	movs	r3, #1
 8004db8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8004dba:	bf00      	nop
 8004dbc:	f7ff fde4 	bl	8004988 <SPI_Timer_Status>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d007      	beq.n	8004dd6 <USER_SPI_initialize+0x162>
 8004dc6:	7bbb      	ldrb	r3, [r7, #14]
 8004dc8:	2100      	movs	r1, #0
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7ff fee3 	bl	8004b96 <send_cmd>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1f2      	bne.n	8004dbc <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8004dd6:	f7ff fdd7 	bl	8004988 <SPI_Timer_Status>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d007      	beq.n	8004df0 <USER_SPI_initialize+0x17c>
 8004de0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004de4:	2010      	movs	r0, #16
 8004de6:	f7ff fed6 	bl	8004b96 <send_cmd>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <USER_SPI_initialize+0x180>
				ty = 0;
 8004df0:	2300      	movs	r3, #0
 8004df2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8004df4:	4a14      	ldr	r2, [pc, #80]	@ (8004e48 <USER_SPI_initialize+0x1d4>)
 8004df6:	7b7b      	ldrb	r3, [r7, #13]
 8004df8:	7013      	strb	r3, [r2, #0]
	despiselect();
 8004dfa:	f7ff fe45 	bl	8004a88 <despiselect>

	if (ty) {			/* OK */
 8004dfe:	7b7b      	ldrb	r3, [r7, #13]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d012      	beq.n	8004e2a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8004e04:	4b0f      	ldr	r3, [pc, #60]	@ (8004e44 <USER_SPI_initialize+0x1d0>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8004e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e44 <USER_SPI_initialize+0x1d0>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0210 	orr.w	r2, r2, #16
 8004e16:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8004e18:	4b09      	ldr	r3, [pc, #36]	@ (8004e40 <USER_SPI_initialize+0x1cc>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	f023 0301 	bic.w	r3, r3, #1
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	4b06      	ldr	r3, [pc, #24]	@ (8004e40 <USER_SPI_initialize+0x1cc>)
 8004e26:	701a      	strb	r2, [r3, #0]
 8004e28:	e002      	b.n	8004e30 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8004e2a:	4b05      	ldr	r3, [pc, #20]	@ (8004e40 <USER_SPI_initialize+0x1cc>)
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8004e30:	4b03      	ldr	r3, [pc, #12]	@ (8004e40 <USER_SPI_initialize+0x1cc>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	b2db      	uxtb	r3, r3
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd90      	pop	{r4, r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000020 	.word	0x20000020
 8004e44:	200000e8 	.word	0x200000e8
 8004e48:	200009dc 	.word	0x200009dc

08004e4c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4603      	mov	r3, r0
 8004e54:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8004e56:	79fb      	ldrb	r3, [r7, #7]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <USER_SPI_status+0x14>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e002      	b.n	8004e66 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8004e60:	4b04      	ldr	r3, [pc, #16]	@ (8004e74 <USER_SPI_status+0x28>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	b2db      	uxtb	r3, r3
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	20000020 	.word	0x20000020

08004e78 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60b9      	str	r1, [r7, #8]
 8004e80:	607a      	str	r2, [r7, #4]
 8004e82:	603b      	str	r3, [r7, #0]
 8004e84:	4603      	mov	r3, r0
 8004e86:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d102      	bne.n	8004e94 <USER_SPI_read+0x1c>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <USER_SPI_read+0x20>
 8004e94:	2304      	movs	r3, #4
 8004e96:	e04d      	b.n	8004f34 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004e98:	4b28      	ldr	r3, [pc, #160]	@ (8004f3c <USER_SPI_read+0xc4>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <USER_SPI_read+0x32>
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e044      	b.n	8004f34 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8004eaa:	4b25      	ldr	r3, [pc, #148]	@ (8004f40 <USER_SPI_read+0xc8>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d102      	bne.n	8004ebc <USER_SPI_read+0x44>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	025b      	lsls	r3, r3, #9
 8004eba:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d111      	bne.n	8004ee6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	2011      	movs	r0, #17
 8004ec6:	f7ff fe66 	bl	8004b96 <send_cmd>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d129      	bne.n	8004f24 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8004ed0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004ed4:	68b8      	ldr	r0, [r7, #8]
 8004ed6:	f7ff fe03 	bl	8004ae0 <rcvr_datablock>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d021      	beq.n	8004f24 <USER_SPI_read+0xac>
			count = 0;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	603b      	str	r3, [r7, #0]
 8004ee4:	e01e      	b.n	8004f24 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	2012      	movs	r0, #18
 8004eea:	f7ff fe54 	bl	8004b96 <send_cmd>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d117      	bne.n	8004f24 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004ef4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004ef8:	68b8      	ldr	r0, [r7, #8]
 8004efa:	f7ff fdf1 	bl	8004ae0 <rcvr_datablock>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00a      	beq.n	8004f1a <USER_SPI_read+0xa2>
				buff += 512;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004f0a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	603b      	str	r3, [r7, #0]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1ed      	bne.n	8004ef4 <USER_SPI_read+0x7c>
 8004f18:	e000      	b.n	8004f1c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8004f1a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	200c      	movs	r0, #12
 8004f20:	f7ff fe39 	bl	8004b96 <send_cmd>
		}
	}
	despiselect();
 8004f24:	f7ff fdb0 	bl	8004a88 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	bf14      	ite	ne
 8004f2e:	2301      	movne	r3, #1
 8004f30:	2300      	moveq	r3, #0
 8004f32:	b2db      	uxtb	r3, r3
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	20000020 	.word	0x20000020
 8004f40:	200009dc 	.word	0x200009dc

08004f44 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	607a      	str	r2, [r7, #4]
 8004f4e:	603b      	str	r3, [r7, #0]
 8004f50:	4603      	mov	r3, r0
 8004f52:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004f54:	7bfb      	ldrb	r3, [r7, #15]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d102      	bne.n	8004f60 <USER_SPI_write+0x1c>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <USER_SPI_write+0x20>
 8004f60:	2304      	movs	r3, #4
 8004f62:	e063      	b.n	800502c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8004f64:	4b33      	ldr	r3, [pc, #204]	@ (8005034 <USER_SPI_write+0xf0>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <USER_SPI_write+0x32>
 8004f72:	2303      	movs	r3, #3
 8004f74:	e05a      	b.n	800502c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8004f76:	4b2f      	ldr	r3, [pc, #188]	@ (8005034 <USER_SPI_write+0xf0>)
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <USER_SPI_write+0x44>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e051      	b.n	800502c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8004f88:	4b2b      	ldr	r3, [pc, #172]	@ (8005038 <USER_SPI_write+0xf4>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	f003 0308 	and.w	r3, r3, #8
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d102      	bne.n	8004f9a <USER_SPI_write+0x56>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	025b      	lsls	r3, r3, #9
 8004f98:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d110      	bne.n	8004fc2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	2018      	movs	r0, #24
 8004fa4:	f7ff fdf7 	bl	8004b96 <send_cmd>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d136      	bne.n	800501c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8004fae:	21fe      	movs	r1, #254	@ 0xfe
 8004fb0:	68b8      	ldr	r0, [r7, #8]
 8004fb2:	f7ff fdbe 	bl	8004b32 <xmit_datablock>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d02f      	beq.n	800501c <USER_SPI_write+0xd8>
			count = 0;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	e02c      	b.n	800501c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8004fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8005038 <USER_SPI_write+0xf4>)
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	f003 0306 	and.w	r3, r3, #6
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <USER_SPI_write+0x92>
 8004fce:	6839      	ldr	r1, [r7, #0]
 8004fd0:	2097      	movs	r0, #151	@ 0x97
 8004fd2:	f7ff fde0 	bl	8004b96 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	2019      	movs	r0, #25
 8004fda:	f7ff fddc 	bl	8004b96 <send_cmd>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d11b      	bne.n	800501c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8004fe4:	21fc      	movs	r1, #252	@ 0xfc
 8004fe6:	68b8      	ldr	r0, [r7, #8]
 8004fe8:	f7ff fda3 	bl	8004b32 <xmit_datablock>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <USER_SPI_write+0xc4>
				buff += 512;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004ff8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	603b      	str	r3, [r7, #0]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1ee      	bne.n	8004fe4 <USER_SPI_write+0xa0>
 8005006:	e000      	b.n	800500a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8005008:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800500a:	21fd      	movs	r1, #253	@ 0xfd
 800500c:	2000      	movs	r0, #0
 800500e:	f7ff fd90 	bl	8004b32 <xmit_datablock>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <USER_SPI_write+0xd8>
 8005018:	2301      	movs	r3, #1
 800501a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800501c:	f7ff fd34 	bl	8004a88 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	bf14      	ite	ne
 8005026:	2301      	movne	r3, #1
 8005028:	2300      	moveq	r3, #0
 800502a:	b2db      	uxtb	r3, r3
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	20000020 	.word	0x20000020
 8005038:	200009dc 	.word	0x200009dc

0800503c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08c      	sub	sp, #48	@ 0x30
 8005040:	af00      	add	r7, sp, #0
 8005042:	4603      	mov	r3, r0
 8005044:	603a      	str	r2, [r7, #0]
 8005046:	71fb      	strb	r3, [r7, #7]
 8005048:	460b      	mov	r3, r1
 800504a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800504c:	79fb      	ldrb	r3, [r7, #7]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <USER_SPI_ioctl+0x1a>
 8005052:	2304      	movs	r3, #4
 8005054:	e15a      	b.n	800530c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005056:	4baf      	ldr	r3, [pc, #700]	@ (8005314 <USER_SPI_ioctl+0x2d8>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <USER_SPI_ioctl+0x2c>
 8005064:	2303      	movs	r3, #3
 8005066:	e151      	b.n	800530c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800506e:	79bb      	ldrb	r3, [r7, #6]
 8005070:	2b04      	cmp	r3, #4
 8005072:	f200 8136 	bhi.w	80052e2 <USER_SPI_ioctl+0x2a6>
 8005076:	a201      	add	r2, pc, #4	@ (adr r2, 800507c <USER_SPI_ioctl+0x40>)
 8005078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507c:	08005091 	.word	0x08005091
 8005080:	080050a5 	.word	0x080050a5
 8005084:	080052e3 	.word	0x080052e3
 8005088:	08005151 	.word	0x08005151
 800508c:	08005247 	.word	0x08005247
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8005090:	f7ff fd0a 	bl	8004aa8 <spiselect>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 8127 	beq.w	80052ea <USER_SPI_ioctl+0x2ae>
 800509c:	2300      	movs	r3, #0
 800509e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80050a2:	e122      	b.n	80052ea <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80050a4:	2100      	movs	r1, #0
 80050a6:	2009      	movs	r0, #9
 80050a8:	f7ff fd75 	bl	8004b96 <send_cmd>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f040 811d 	bne.w	80052ee <USER_SPI_ioctl+0x2b2>
 80050b4:	f107 030c 	add.w	r3, r7, #12
 80050b8:	2110      	movs	r1, #16
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7ff fd10 	bl	8004ae0 <rcvr_datablock>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 8113 	beq.w	80052ee <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80050c8:	7b3b      	ldrb	r3, [r7, #12]
 80050ca:	099b      	lsrs	r3, r3, #6
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d111      	bne.n	80050f6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80050d2:	7d7b      	ldrb	r3, [r7, #21]
 80050d4:	461a      	mov	r2, r3
 80050d6:	7d3b      	ldrb	r3, [r7, #20]
 80050d8:	021b      	lsls	r3, r3, #8
 80050da:	4413      	add	r3, r2
 80050dc:	461a      	mov	r2, r3
 80050de:	7cfb      	ldrb	r3, [r7, #19]
 80050e0:	041b      	lsls	r3, r3, #16
 80050e2:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80050e6:	4413      	add	r3, r2
 80050e8:	3301      	adds	r3, #1
 80050ea:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	029a      	lsls	r2, r3, #10
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	e028      	b.n	8005148 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80050f6:	7c7b      	ldrb	r3, [r7, #17]
 80050f8:	f003 030f 	and.w	r3, r3, #15
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	7dbb      	ldrb	r3, [r7, #22]
 8005100:	09db      	lsrs	r3, r3, #7
 8005102:	b2db      	uxtb	r3, r3
 8005104:	4413      	add	r3, r2
 8005106:	b2da      	uxtb	r2, r3
 8005108:	7d7b      	ldrb	r3, [r7, #21]
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	b2db      	uxtb	r3, r3
 800510e:	f003 0306 	and.w	r3, r3, #6
 8005112:	b2db      	uxtb	r3, r3
 8005114:	4413      	add	r3, r2
 8005116:	b2db      	uxtb	r3, r3
 8005118:	3302      	adds	r3, #2
 800511a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800511e:	7d3b      	ldrb	r3, [r7, #20]
 8005120:	099b      	lsrs	r3, r3, #6
 8005122:	b2db      	uxtb	r3, r3
 8005124:	461a      	mov	r2, r3
 8005126:	7cfb      	ldrb	r3, [r7, #19]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	441a      	add	r2, r3
 800512c:	7cbb      	ldrb	r3, [r7, #18]
 800512e:	029b      	lsls	r3, r3, #10
 8005130:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005134:	4413      	add	r3, r2
 8005136:	3301      	adds	r3, #1
 8005138:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800513a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800513e:	3b09      	subs	r3, #9
 8005140:	69fa      	ldr	r2, [r7, #28]
 8005142:	409a      	lsls	r2, r3
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800514e:	e0ce      	b.n	80052ee <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005150:	4b71      	ldr	r3, [pc, #452]	@ (8005318 <USER_SPI_ioctl+0x2dc>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b00      	cmp	r3, #0
 800515a:	d031      	beq.n	80051c0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800515c:	2100      	movs	r1, #0
 800515e:	208d      	movs	r0, #141	@ 0x8d
 8005160:	f7ff fd19 	bl	8004b96 <send_cmd>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	f040 80c3 	bne.w	80052f2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800516c:	20ff      	movs	r0, #255	@ 0xff
 800516e:	f7ff fc21 	bl	80049b4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005172:	f107 030c 	add.w	r3, r7, #12
 8005176:	2110      	movs	r1, #16
 8005178:	4618      	mov	r0, r3
 800517a:	f7ff fcb1 	bl	8004ae0 <rcvr_datablock>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 80b6 	beq.w	80052f2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8005186:	2330      	movs	r3, #48	@ 0x30
 8005188:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800518c:	e007      	b.n	800519e <USER_SPI_ioctl+0x162>
 800518e:	20ff      	movs	r0, #255	@ 0xff
 8005190:	f7ff fc10 	bl	80049b4 <xchg_spi>
 8005194:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005198:	3b01      	subs	r3, #1
 800519a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800519e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f3      	bne.n	800518e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80051a6:	7dbb      	ldrb	r3, [r7, #22]
 80051a8:	091b      	lsrs	r3, r3, #4
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	461a      	mov	r2, r3
 80051ae:	2310      	movs	r3, #16
 80051b0:	fa03 f202 	lsl.w	r2, r3, r2
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80051be:	e098      	b.n	80052f2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80051c0:	2100      	movs	r1, #0
 80051c2:	2009      	movs	r0, #9
 80051c4:	f7ff fce7 	bl	8004b96 <send_cmd>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f040 8091 	bne.w	80052f2 <USER_SPI_ioctl+0x2b6>
 80051d0:	f107 030c 	add.w	r3, r7, #12
 80051d4:	2110      	movs	r1, #16
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff fc82 	bl	8004ae0 <rcvr_datablock>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f000 8087 	beq.w	80052f2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80051e4:	4b4c      	ldr	r3, [pc, #304]	@ (8005318 <USER_SPI_ioctl+0x2dc>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d012      	beq.n	8005216 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80051f0:	7dbb      	ldrb	r3, [r7, #22]
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80051f8:	7dfa      	ldrb	r2, [r7, #23]
 80051fa:	09d2      	lsrs	r2, r2, #7
 80051fc:	b2d2      	uxtb	r2, r2
 80051fe:	4413      	add	r3, r2
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	7e7b      	ldrb	r3, [r7, #25]
 8005204:	099b      	lsrs	r3, r3, #6
 8005206:	b2db      	uxtb	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	fa02 f303 	lsl.w	r3, r2, r3
 800520e:	461a      	mov	r2, r3
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	e013      	b.n	800523e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8005216:	7dbb      	ldrb	r3, [r7, #22]
 8005218:	109b      	asrs	r3, r3, #2
 800521a:	b29b      	uxth	r3, r3
 800521c:	f003 031f 	and.w	r3, r3, #31
 8005220:	3301      	adds	r3, #1
 8005222:	7dfa      	ldrb	r2, [r7, #23]
 8005224:	00d2      	lsls	r2, r2, #3
 8005226:	f002 0218 	and.w	r2, r2, #24
 800522a:	7df9      	ldrb	r1, [r7, #23]
 800522c:	0949      	lsrs	r1, r1, #5
 800522e:	b2c9      	uxtb	r1, r1
 8005230:	440a      	add	r2, r1
 8005232:	3201      	adds	r2, #1
 8005234:	fb02 f303 	mul.w	r3, r2, r3
 8005238:	461a      	mov	r2, r3
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800523e:	2300      	movs	r3, #0
 8005240:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8005244:	e055      	b.n	80052f2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005246:	4b34      	ldr	r3, [pc, #208]	@ (8005318 <USER_SPI_ioctl+0x2dc>)
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	f003 0306 	and.w	r3, r3, #6
 800524e:	2b00      	cmp	r3, #0
 8005250:	d051      	beq.n	80052f6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005252:	f107 020c 	add.w	r2, r7, #12
 8005256:	79fb      	ldrb	r3, [r7, #7]
 8005258:	210b      	movs	r1, #11
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff feee 	bl	800503c <USER_SPI_ioctl>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d149      	bne.n	80052fa <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005266:	7b3b      	ldrb	r3, [r7, #12]
 8005268:	099b      	lsrs	r3, r3, #6
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d104      	bne.n	800527a <USER_SPI_ioctl+0x23e>
 8005270:	7dbb      	ldrb	r3, [r7, #22]
 8005272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005276:	2b00      	cmp	r3, #0
 8005278:	d041      	beq.n	80052fe <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	623b      	str	r3, [r7, #32]
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800528a:	4b23      	ldr	r3, [pc, #140]	@ (8005318 <USER_SPI_ioctl+0x2dc>)
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b00      	cmp	r3, #0
 8005294:	d105      	bne.n	80052a2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8005296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005298:	025b      	lsls	r3, r3, #9
 800529a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800529c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529e:	025b      	lsls	r3, r3, #9
 80052a0:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80052a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052a4:	2020      	movs	r0, #32
 80052a6:	f7ff fc76 	bl	8004b96 <send_cmd>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d128      	bne.n	8005302 <USER_SPI_ioctl+0x2c6>
 80052b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80052b2:	2021      	movs	r0, #33	@ 0x21
 80052b4:	f7ff fc6f 	bl	8004b96 <send_cmd>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d121      	bne.n	8005302 <USER_SPI_ioctl+0x2c6>
 80052be:	2100      	movs	r1, #0
 80052c0:	2026      	movs	r0, #38	@ 0x26
 80052c2:	f7ff fc68 	bl	8004b96 <send_cmd>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d11a      	bne.n	8005302 <USER_SPI_ioctl+0x2c6>
 80052cc:	f247 5030 	movw	r0, #30000	@ 0x7530
 80052d0:	f7ff fbb6 	bl	8004a40 <wait_ready>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d013      	beq.n	8005302 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80052da:	2300      	movs	r3, #0
 80052dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80052e0:	e00f      	b.n	8005302 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80052e2:	2304      	movs	r3, #4
 80052e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80052e8:	e00c      	b.n	8005304 <USER_SPI_ioctl+0x2c8>
		break;
 80052ea:	bf00      	nop
 80052ec:	e00a      	b.n	8005304 <USER_SPI_ioctl+0x2c8>
		break;
 80052ee:	bf00      	nop
 80052f0:	e008      	b.n	8005304 <USER_SPI_ioctl+0x2c8>
		break;
 80052f2:	bf00      	nop
 80052f4:	e006      	b.n	8005304 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80052f6:	bf00      	nop
 80052f8:	e004      	b.n	8005304 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80052fa:	bf00      	nop
 80052fc:	e002      	b.n	8005304 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80052fe:	bf00      	nop
 8005300:	e000      	b.n	8005304 <USER_SPI_ioctl+0x2c8>
		break;
 8005302:	bf00      	nop
	}

	despiselect();
 8005304:	f7ff fbc0 	bl	8004a88 <despiselect>

	return res;
 8005308:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800530c:	4618      	mov	r0, r3
 800530e:	3730      	adds	r7, #48	@ 0x30
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	20000020 	.word	0x20000020
 8005318:	200009dc 	.word	0x200009dc

0800531c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	4613      	mov	r3, r2
 8005328:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800532a:	2301      	movs	r3, #1
 800532c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800532e:	2300      	movs	r3, #0
 8005330:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005332:	4b1f      	ldr	r3, [pc, #124]	@ (80053b0 <FATFS_LinkDriverEx+0x94>)
 8005334:	7a5b      	ldrb	r3, [r3, #9]
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d131      	bne.n	80053a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800533c:	4b1c      	ldr	r3, [pc, #112]	@ (80053b0 <FATFS_LinkDriverEx+0x94>)
 800533e:	7a5b      	ldrb	r3, [r3, #9]
 8005340:	b2db      	uxtb	r3, r3
 8005342:	461a      	mov	r2, r3
 8005344:	4b1a      	ldr	r3, [pc, #104]	@ (80053b0 <FATFS_LinkDriverEx+0x94>)
 8005346:	2100      	movs	r1, #0
 8005348:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800534a:	4b19      	ldr	r3, [pc, #100]	@ (80053b0 <FATFS_LinkDriverEx+0x94>)
 800534c:	7a5b      	ldrb	r3, [r3, #9]
 800534e:	b2db      	uxtb	r3, r3
 8005350:	4a17      	ldr	r2, [pc, #92]	@ (80053b0 <FATFS_LinkDriverEx+0x94>)
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800535a:	4b15      	ldr	r3, [pc, #84]	@ (80053b0 <FATFS_LinkDriverEx+0x94>)
 800535c:	7a5b      	ldrb	r3, [r3, #9]
 800535e:	b2db      	uxtb	r3, r3
 8005360:	461a      	mov	r2, r3
 8005362:	4b13      	ldr	r3, [pc, #76]	@ (80053b0 <FATFS_LinkDriverEx+0x94>)
 8005364:	4413      	add	r3, r2
 8005366:	79fa      	ldrb	r2, [r7, #7]
 8005368:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800536a:	4b11      	ldr	r3, [pc, #68]	@ (80053b0 <FATFS_LinkDriverEx+0x94>)
 800536c:	7a5b      	ldrb	r3, [r3, #9]
 800536e:	b2db      	uxtb	r3, r3
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	b2d1      	uxtb	r1, r2
 8005374:	4a0e      	ldr	r2, [pc, #56]	@ (80053b0 <FATFS_LinkDriverEx+0x94>)
 8005376:	7251      	strb	r1, [r2, #9]
 8005378:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800537a:	7dbb      	ldrb	r3, [r7, #22]
 800537c:	3330      	adds	r3, #48	@ 0x30
 800537e:	b2da      	uxtb	r2, r3
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	3301      	adds	r3, #1
 8005388:	223a      	movs	r2, #58	@ 0x3a
 800538a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	3302      	adds	r3, #2
 8005390:	222f      	movs	r2, #47	@ 0x2f
 8005392:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	3303      	adds	r3, #3
 8005398:	2200      	movs	r2, #0
 800539a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800539c:	2300      	movs	r3, #0
 800539e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80053a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	371c      	adds	r7, #28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	200009e8 	.word	0x200009e8

080053b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80053be:	2200      	movs	r2, #0
 80053c0:	6839      	ldr	r1, [r7, #0]
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff ffaa 	bl	800531c <FATFS_LinkDriverEx>
 80053c8:	4603      	mov	r3, r0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <memset>:
 80053d2:	4402      	add	r2, r0
 80053d4:	4603      	mov	r3, r0
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d100      	bne.n	80053dc <memset+0xa>
 80053da:	4770      	bx	lr
 80053dc:	f803 1b01 	strb.w	r1, [r3], #1
 80053e0:	e7f9      	b.n	80053d6 <memset+0x4>
	...

080053e4 <__libc_init_array>:
 80053e4:	b570      	push	{r4, r5, r6, lr}
 80053e6:	4d0d      	ldr	r5, [pc, #52]	@ (800541c <__libc_init_array+0x38>)
 80053e8:	4c0d      	ldr	r4, [pc, #52]	@ (8005420 <__libc_init_array+0x3c>)
 80053ea:	1b64      	subs	r4, r4, r5
 80053ec:	10a4      	asrs	r4, r4, #2
 80053ee:	2600      	movs	r6, #0
 80053f0:	42a6      	cmp	r6, r4
 80053f2:	d109      	bne.n	8005408 <__libc_init_array+0x24>
 80053f4:	4d0b      	ldr	r5, [pc, #44]	@ (8005424 <__libc_init_array+0x40>)
 80053f6:	4c0c      	ldr	r4, [pc, #48]	@ (8005428 <__libc_init_array+0x44>)
 80053f8:	f000 f818 	bl	800542c <_init>
 80053fc:	1b64      	subs	r4, r4, r5
 80053fe:	10a4      	asrs	r4, r4, #2
 8005400:	2600      	movs	r6, #0
 8005402:	42a6      	cmp	r6, r4
 8005404:	d105      	bne.n	8005412 <__libc_init_array+0x2e>
 8005406:	bd70      	pop	{r4, r5, r6, pc}
 8005408:	f855 3b04 	ldr.w	r3, [r5], #4
 800540c:	4798      	blx	r3
 800540e:	3601      	adds	r6, #1
 8005410:	e7ee      	b.n	80053f0 <__libc_init_array+0xc>
 8005412:	f855 3b04 	ldr.w	r3, [r5], #4
 8005416:	4798      	blx	r3
 8005418:	3601      	adds	r6, #1
 800541a:	e7f2      	b.n	8005402 <__libc_init_array+0x1e>
 800541c:	0800546c 	.word	0x0800546c
 8005420:	0800546c 	.word	0x0800546c
 8005424:	0800546c 	.word	0x0800546c
 8005428:	08005470 	.word	0x08005470

0800542c <_init>:
 800542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542e:	bf00      	nop
 8005430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005432:	bc08      	pop	{r3}
 8005434:	469e      	mov	lr, r3
 8005436:	4770      	bx	lr

08005438 <_fini>:
 8005438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543a:	bf00      	nop
 800543c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800543e:	bc08      	pop	{r3}
 8005440:	469e      	mov	lr, r3
 8005442:	4770      	bx	lr
